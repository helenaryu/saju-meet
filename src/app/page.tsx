"use client"

import { useState, useEffect, Suspense } from "react"
import { AppStep, ProfileData, SajuData, ChatMessage } from "@/types"
import { FACE_READING_KEYWORDS, SAJU_KEYWORDS, IDEAL_TYPE_KEYWORDS, dummyMatches, dummyAnalysisReport } from "@/constants/data"
import { useSearchParams } from "next/navigation"
import { sajuService } from "@/lib/api/saju"

function FaceReadingAppContent() {
  const searchParams = useSearchParams()
  const [currentStep, setCurrentStep] = useState<AppStep>("onboarding")
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [additionalPhotos, setAdditionalPhotos] = useState<string[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(3)
  const [faceReadingResults, setFaceReadingResults] = useState<Array<{ keyword: string; description: string }>>([])
  const [sajuResults, setSajuResults] = useState<Array<{ keyword: string; description: string }>>([])
  const [isSajuAnalyzing, setIsSajuAnalyzing] = useState(false)
  const [sajuProgress, setSajuProgress] = useState(3)

  const [integratedAnalysisStep, setIntegratedAnalysisStep] = useState<"photo" | "saju" | "analyzing" | "result">(
    "photo",
  )

  const [profileData, setProfileData] = useState<ProfileData>({
    nickname: "",
    gender: "",
    birthDate: "",
    birthTime: "",
    region: "",
    height: "",
    bodyType: "",
    job: "",
    education: "",
    school: "",
    introduction: "",
    idealKeywords: [],
  })
  const [sajuData, setSajuData] = useState<SajuData>({
    birthDate: "",
    birthTime: "",
    birthPlace: "",
    birthPlaceDetail: "",
  })
  const [sajuErrors, setSajuErrors] = useState<Record<string, string>>({})
  const [selectedIdealKeywords, setSelectedIdealKeywords] = useState<string[]>([])
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [showMatches, setShowMatches] = useState(false)

  const [isEditingProfile, setIsEditingProfile] = useState(false)
  const [editProfileData, setEditProfileData] = useState(profileData)

  const [selectedUser, setSelectedUser] = useState<any>(null)

  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [isAuthenticating, setIsAuthenticating] = useState(false)
  const [authProvider, setAuthProvider] = useState<"google" | "kakao" | null>(null)

  // Supabase Í¥ÄÎ†® ÏÉÅÌÉú
  const [supabase, setSupabase] = useState<any>(null)
  const [supabaseAvailable, setSupabaseAvailable] = useState(false)
  
  // Î°úÏª¨ Ïù∏Ï¶ù ÏÉÅÌÉú (Supabase ÏóÜÏù¥ÎèÑ ÏûëÎèô)
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [localUser, setLocalUser] = useState<any>(null)

  // Supabase Ï¥àÍ∏∞Ìôî (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎßå)
  useEffect(() => {
    const initializeSupabase = async () => {
      try {
        const { supabase: supabaseClient, isSupabaseAvailable } = await import('@/lib/supabase')
        setSupabase(supabaseClient)
        setSupabaseAvailable(isSupabaseAvailable())
      } catch (error) {
        console.log('Supabase Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error)
        setSupabaseAvailable(false)
      }
    }

    initializeSupabase()
  }, [])

  const initializeChatMessages = (userName: string) => {
    const dummyMessages: ChatMessage[] = [
      {
        id: "1",
        text: "ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌîÑÎ°úÌïÑÏùÑ Î≥¥Í≥† Ïó∞ÎùΩÎìúÎ†∏Ïñ¥Ïöî üòä",
        sender: "me",
        timestamp: new Date(Date.now() - 3600000), // 1ÏãúÍ∞Ñ Ï†Ñ
        isRead: true,
      },
      {
        id: "2",
        text: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Í¥ÄÏÉÅ Í∂ÅÌï©Ïù¥ ÎÜíÎã§Í≥† ÎÇòÏôÄÏÑú Ïã†Í∏∞ÌñàÏñ¥Ïöî „Öé„Öé",
        sender: "other",
        timestamp: new Date(Date.now() - 3000000), // 50Î∂Ñ Ï†Ñ
        isRead: true,
      },
      {
        id: "3",
        text: "Ï†ÄÎèÑÏöî! Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î≥¥Îãà Ï†ïÎßê Ïûò ÎßûÏùÑ Í≤É Í∞ôÎçîÎùºÍ≥†Ïöî. Ïñ¥Îñ§ Ïùº ÌïòÏÑ∏Ïöî?",
        sender: "me",
        timestamp: new Date(Date.now() - 2400000), // 40Î∂Ñ Ï†Ñ
        isRead: true,
      },
      {
        id: "4",
        text: `${userName === "ÍπÄÎØºÏ§Ä" ? "ÎîîÏûêÏù∏" : userName === "Ïù¥ÏÑúÏó∞" ? "ÎßàÏºÄÌåÖ" : "Í∞úÎ∞ú"} ÏùºÏùÑ ÌïòÍ≥† ÏûàÏñ¥Ïöî. ÌîÑÎ°úÌïÑÏóêÏÑú Î≥¥Îãà Í¥ÄÏÉÅÏù¥ Ï†ïÎßê Îî∞ÎúªÌï¥ Î≥¥Ïù¥ÏãúÎçîÎùºÍµ¨Ïöî!`,
        sender: "other",
        timestamp: new Date(Date.now() - 1800000), // 30Î∂Ñ Ï†Ñ
        isRead: true,
      },
      {
        id: "5",
        text: "Í∞êÏÇ¨Ìï¥Ïöî! ÏãúÍ∞Ñ ÎêòÏã§ Îïå Ïª§Ìîº Ìïú Ïûî Ïñ¥Îñ†ÏÑ∏Ïöî?",
        sender: "me",
        timestamp: new Date(Date.now() - 900000), // 15Î∂Ñ Ï†Ñ
        isRead: true,
      },
    ]
    setMessages(dummyMessages)
  }

  const sendMessage = () => {
    if (newMessage.trim()) {
      const message: ChatMessage = {
        id: Date.now().toString(),
        text: newMessage.trim(),
        sender: "me",
        timestamp: new Date(),
        isRead: false,
      }
      setMessages((prev) => [...prev, message])
      setNewMessage("")

      // ÏÉÅÎåÄÎ∞© ÏûêÎèô ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
      setTimeout(() => {
        const responses = [
          "Ï¢ãÏïÑÏöî! Ïñ∏Ï†úÍ∞Ä Ï¢ãÏúºÏã§ÍπåÏöî?",
          "ÎÑ§, Ï¢ãÏùÄ ÏÉùÍ∞ÅÏù¥ÏóêÏöî üòä",
          "ÏãúÍ∞Ñ ÎßûÏ∂∞ÏÑú Ïó∞ÎùΩÎìúÎ¶¥Í≤åÏöî!",
          "Í∏∞ÎåÄÎêòÎÑ§Ïöî „Öé„Öé",
        ]
        const randomResponse = responses[Math.floor(Math.random() * responses.length)]
        const autoReply: ChatMessage = {
          id: (Date.now() + 1).toString(),
          text: randomResponse,
          sender: "other",
          timestamp: new Date(),
          isRead: false,
        }
        setMessages((prev) => [...prev, autoReply])
      }, 2000)
    }
  }

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        const imageData = e.target?.result as string
        setUploadedImage(imageData)
        // ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú ÌõÑ Ï¶âÏãú Î∂ÑÏÑù Îã®Í≥ÑÎ°ú Ïù¥Îèô
        setIntegratedAnalysisStep("analyzing")
        // uploadedImage ÏÉÅÌÉúÍ∞Ä ÏÑ§Ï†ïÎêú ÌõÑ startAnalysis Ìò∏Ï∂ú
        setTimeout(() => {
          startAnalysisWithImage(imageData)
        }, 100)
      }
      reader.readAsDataURL(file)
    }
  }

  const startAnalysisWithImage = async (imageData: string) => {
    setIsAnalyzing(true)
    setAnalysisProgress(3)

    try {
      // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ File Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
      const response = await fetch(imageData)
      const blob = await response.blob()
      const imageFile = new File([blob], 'profile-image.jpg', { type: 'image/jpeg' })

      // FormData ÏÉùÏÑ± (Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©)
      const formData = new FormData()
      formData.append('imageFile', imageFile)

      // API Ìò∏Ï∂ú
      const apiResponse = await fetch('/api/analysis', {
        method: 'POST',
        body: formData
      })

      if (!apiResponse.ok) {
        throw new Error('API Ìò∏Ï∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }

      const result = await apiResponse.json()
      
      if (result.success) {
        // API Í≤∞Í≥ºÎ•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
        setFaceReadingResults(result.data.faceReading.keywords.map((keyword: string) => ({
          keyword,
          description: result.data.faceReading.interpretation
        })))
        
        console.log('Í¥ÄÏÉÅ Î∂ÑÏÑù ÏôÑÎ£å:', result.data)
      } else {
        throw new Error(result.error || 'Î∂ÑÏÑùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }

    } catch (error) {
      console.error('Î∂ÑÏÑù Ï§ë Ïò§Î•ò:', error)
      
      // Ïò§Î•ò Î∞úÏÉù Ïãú Í∏∞Ï°¥ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      const shuffled = [...FACE_READING_KEYWORDS].sort(() => 0.5 - Math.random())
      const selected = shuffled.slice(0, Math.floor(Math.random() * 3) + 3)
      setFaceReadingResults(selected)
    } finally {
      setIsAnalyzing(false)
      setAnalysisProgress(0)
      // ÏÇ¨ÏßÑ Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ Î∞îÎ°ú ÏÇ¨Ï£º ÏûÖÎ†• Îã®Í≥ÑÎ°ú ÏßÑÌñâ
      setIntegratedAnalysisStep("saju")
    }
  }

  const startAnalysis = async () => {
    if (!uploadedImage) {
      throw new Error('ÏÇ¨ÏßÑÏù¥ ÏóÖÎ°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.')
    }
    await startAnalysisWithImage(uploadedImage)
  }

  const startSajuAnalysis = async () => {
    setIsSajuAnalyzing(true)
    setSajuProgress(3)
    // ÏÇ¨Ï£º Î∂ÑÏÑù ÏãúÏûë Ïãú Î°úÎî© ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    setIntegratedAnalysisStep("analyzing")

    try {
      // ÏÇ¨Ï£º Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù (ÏÉùÎÖÑÏõîÏùºÎßå ÌïÑÏàò)
      if (!sajuData.birthDate) {
        throw new Error('ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      }

      // ÏÇ¨Ï£º Î∂ÑÏÑù API Ìò∏Ï∂ú (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑú ÏßÅÏ†ë Ìò∏Ï∂ú)
      const sajuResult = await sajuService.analyzeSaju({
        birthDate: sajuData.birthDate,
        birthTime: sajuData.birthTime || '00:00', // Ï∂úÏÉù ÏãúÍ∞ÑÏù¥ ÏóÜÏúºÎ©¥ ÏûêÏ†ïÏúºÎ°ú ÏÑ§Ï†ï
        birthPlace: sajuData.birthPlace
      })

      // ÏÇ¨Ï£º Í≤∞Í≥ºÎ•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
      setSajuResults(sajuResult.keywords.map((keyword: string) => ({
        keyword,
        description: sajuResult.personality
      })))

      console.log('ÏÇ¨Ï£º Î∂ÑÏÑù ÏôÑÎ£å:', sajuResult)

    } catch (error) {
      console.error('ÏÇ¨Ï£º Î∂ÑÏÑù Ï§ë Ïò§Î•ò:', error)
      
      // Ïò§Î•ò Î∞úÏÉù Ïãú Í∏∞Ï°¥ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      const shuffled = [...SAJU_KEYWORDS].sort(() => 0.5 - Math.random())
      const selected = shuffled.slice(0, Math.floor(Math.random() * 3) + 3)
      setSajuResults(selected)
    } finally {
      setIsSajuAnalyzing(false)
      setSajuProgress(0)
      // ÏÇ¨Ï£º Î∂ÑÏÑù ÏôÑÎ£å ÌõÑ Î∞îÎ°ú Í≤∞Í≥º Îã®Í≥ÑÎ°ú ÏßÑÌñâ
      setIntegratedAnalysisStep("result")
    }
  }

  const handleInputChange = (field: string, value: any) => {
    setProfileData((prev) => ({ ...prev, [field]: value }))
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }))
    }
  }

  const handleSajuInputChange = (field: string, value: string) => {
    setSajuData((prev) => ({ ...prev, [field]: value }))
    if (sajuErrors[field]) {
      setSajuErrors((prev) => ({ ...prev, [field]: "" }))
    }
  }

  const validateProfile = () => {
    const newErrors: Record<string, string> = {}

    if (!profileData.nickname.trim()) newErrors.nickname = "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.gender) newErrors.gender = "ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.birthDate) newErrors.birthDate = "ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.region) newErrors.region = "Í±∞Ï£º ÏßÄÏó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.height) newErrors.height = "ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.bodyType) newErrors.bodyType = "Ï≤¥ÌòïÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.job.trim()) newErrors.job = "ÏßÅÏóÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!profileData.education) newErrors.education = "ÌïôÎ†•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
    if (profileData.introduction.length > 1000) newErrors.introduction = "ÏûêÍ∏∞ÏÜåÍ∞úÎäî ÏµúÎåÄ 1000ÏûêÍπåÏßÄ ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§"

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const validateSajuData = () => {
    const newErrors: Record<string, string> = {}

    if (!sajuData.birthDate) newErrors.birthDate = "ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!sajuData.birthTime) newErrors.birthTime = "ÌÉúÏñ¥ÎÇú ÏãúÍ∞ÅÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
    if (!sajuData.birthPlace) newErrors.birthPlace = "ÌÉúÏñ¥ÎÇú ÏßÄÏó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"

    setSajuErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleIdealTypeToggle = (keyword: string) => {
    setSelectedIdealKeywords((prev) => {
      if (prev.includes(keyword)) {
        return prev.filter((k) => k !== keyword)
      } else if (prev.length < 3) {
        return [...prev, keyword]
      }
      return prev
    })
  }

  useEffect(() => {
    if (currentStep === "profile" && sajuData.birthDate && sajuData.birthTime) {
      setProfileData((prev) => ({
        ...prev,
        birthDate: sajuData.birthDate || prev.birthDate,
        birthTime: sajuData.birthTime || prev.birthTime,
      }))
    }
  }, [currentStep, sajuData.birthDate, sajuData.birthTime])

  const handleAdditionalPhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (files) {
      const newPhotos: string[] = []
      Array.from(files).forEach((file) => {
        const reader = new FileReader()
        reader.onload = (e) => {
          const result = e.target?.result as string
          newPhotos.push(result)
          if (newPhotos.length === files.length) {
            setAdditionalPhotos((prev) => [...prev, ...newPhotos].slice(0, 5)) // ÏµúÎåÄ 5Ïû•ÍπåÏßÄ
          }
        }
        reader.readAsDataURL(file)
      })
    }
  }

  const removeAdditionalPhoto = (index: number) => {
    setAdditionalPhotos((prev) => prev.filter((_, i) => i !== index))
  }

  const handleEditProfileChange = (field: string, value: any) => {
    setEditProfileData((prev) => ({ ...prev, [field]: value }))
  }

  const saveProfileChanges = () => {
    setProfileData(editProfileData)
    setIsEditingProfile(false)
  }

  const cancelProfileEdit = () => {
    setEditProfileData(profileData)
    setIsEditingProfile(false)
  }

  // URL ÌååÎùºÎØ∏ÌÑ∞ Í∞êÏßÄÌïòÏó¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const step = searchParams.get('step')
    const auth = searchParams.get('auth')
    
    if (step === 'integrated-analysis') {
      setCurrentStep('integrated-analysis')
      // integrated-analysis Îã®Í≥ÑÏóêÏÑúÎäî photo Îã®Í≥ÑÎ°ú ÏûêÎèô Ïù¥Îèô
      setIntegratedAnalysisStep('photo')
      // Ïù∏Ï¶ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setIsAuthenticating(false)
      setAuthProvider(null)
    }
    
    if (auth === 'error') {
      alert('Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.')
      setIsAuthenticating(false)
      setAuthProvider(null)
    }
  }, [searchParams])

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Î∞è Ï¥àÍ∏∞Ìôî (SupabaseÍ∞Ä ÏÑ§Ï†ïÎêú Í≤ΩÏö∞ÏóêÎßå)
  useEffect(() => {
    if (!supabaseAvailable || !supabase) {
      console.log('SupabaseÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïÑ Ïù∏Ï¶ù Í∏∞Îä•ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.')
      return
    }

    const checkAuthStatus = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession()
        
        if (error) {
          console.error('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò:', error)
          return
        }

        if (session) {
          console.log('Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê:', session.user.email)
          // Î°úÍ∑∏Ïù∏Îêú ÏÉÅÌÉúÎùºÎ©¥ integrated-analysisÎ°ú Ïù¥Îèô
          setCurrentStep('integrated-analysis')
        } else {
          console.log('Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú')
          // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÎùºÎ©¥ onboardingÏúºÎ°ú Ïú†ÏßÄ
          setCurrentStep('onboarding')
        }
      } catch (error) {
        console.error('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ ÏòàÏô∏:', error)
        setCurrentStep('onboarding')
      }
    }

    checkAuthStatus()
  }, [supabaseAvailable, supabase])

  // Î°úÏª¨ Ïù∏Ï¶ù ÏÉÅÌÉú (Supabase ÏóÜÏù¥ÎèÑ ÏûëÎèô)
  const handleLocalLogin = (email: string, password: string) => {
    // Í∞ÑÎã®Ìïú Î°úÏª¨ Ïù∏Ï¶ù (Ïã§Ï†úÎ°úÎäî Îçî ÏïàÏ†ÑÌïú Î∞©Ïãù ÏÇ¨Ïö©)
    if (email && password) {
      const user = {
        id: 'local_user_' + Date.now(),
        email: email,
        nickname: email.split('@')[0],
        createdAt: new Date().toISOString()
      }
      
      setLocalUser(user)
      setIsLoggedIn(true)
      localStorage.setItem('localUser', JSON.stringify(user))
      
      // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌõÑ integrated-analysisÎ°ú Ïù¥Îèô
      setCurrentStep('integrated-analysis')
      setIntegratedAnalysisStep('photo')
    }
  }

  // Î°úÏª¨ Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const handleLocalLogout = () => {
    setLocalUser(null)
    setIsLoggedIn(false)
    localStorage.removeItem('localUser')
    setCurrentStep('onboarding')
  }

  // Î°úÏª¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î≥µÏõê (ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® Ïãú)
  useEffect(() => {
    const savedUser = localStorage.getItem('localUser')
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser)
        setLocalUser(user)
        setIsLoggedIn(true)
        setCurrentStep('integrated-analysis')
        setIntegratedAnalysisStep('photo')
      } catch (error) {
        console.error('Ï†ÄÏû•Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌååÏã± Ïò§Î•ò:', error)
        localStorage.removeItem('localUser')
      }
    }
  }, [])

  // OAuth Ïù∏Ï¶ù Ìï®ÏàòÎì§ (SupabaseÍ∞Ä ÏÑ§Ï†ïÎêú Í≤ΩÏö∞ÏóêÎßå)
  const handleGoogleSignUp = async () => {
    if (!supabaseAvailable || !supabase) {
      // SupabaseÍ∞Ä ÏóÜÏúºÎ©¥ Î°úÏª¨ Ïù∏Ï¶ùÏúºÎ°ú ÎåÄÏ≤¥
      const email = prompt('Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:')
      const password = prompt('ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:')
      if (email && password) {
        handleLocalLogin(email, password)
      }
      return
    }

    setIsAuthenticating(true)
    setAuthProvider("google")
    
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google' as const,
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      })
      
      if (error) {
        console.error('Google Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error)
        alert('Google Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
        setIsAuthenticating(false)
        setAuthProvider(null)
      } else {
        console.log('Google Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', data)
        // ÌåùÏóÖÏù¥ Ïó¥Î¶¨Î©¥ ÏÉÅÌÉúÎäî Ïú†ÏßÄ, ÏΩúÎ∞±ÏóêÏÑú Ï≤òÎ¶¨
      }
    } catch (error) {
      console.error('Google Î°úÍ∑∏Ïù∏ ÏòàÏô∏:', error)
      alert('Google Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      setIsAuthenticating(false)
      setAuthProvider(null)
    }
  }

  const handleKakaoSignUp = async () => {
    if (!supabaseAvailable || !supabase) {
      // SupabaseÍ∞Ä ÏóÜÏúºÎ©¥ Î°úÏª¨ Ïù∏Ï¶ùÏúºÎ°ú ÎåÄÏ≤¥
      const email = prompt('Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:')
      const password = prompt('ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî:')
      if (email && password) {
        handleLocalLogin(email, password)
      }
      return
    }

    setIsAuthenticating(true)
    setAuthProvider("kakao")
    
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'kakao' as const,
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      })
      
      if (error) {
        console.error('Kakao Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error)
        alert('Kakao Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
        setIsAuthenticating(false)
        setAuthProvider(null)
      } else {
        console.log('Kakao Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', data)
        // ÌåùÏóÖÏù¥ Ïó¥Î¶¨Î©¥ ÏÉÅÌÉúÎäî Ïú†ÏßÄ, ÏΩúÎ∞±ÏóêÏÑú Ï≤òÎ¶¨
      }
    } catch (error) {
      console.error('Kakao Î°úÍ∑∏Ïù∏ ÏòàÏô∏:', error)
      alert('Kakao Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      setIsAuthenticating(false)
      setAuthProvider(null)
    }
  }

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò (SupabaseÍ∞Ä ÏÑ§Ï†ïÎêú Í≤ΩÏö∞ÏóêÎßå)
  const handleLogout = async () => {
    if (!supabaseAvailable || !supabase) {
      // SupabaseÍ∞Ä ÏóÜÏúºÎ©¥ Î°úÏª¨ Î°úÍ∑∏ÏïÑÏõÉ
      handleLocalLogout()
      return
    }

    try {
      const { error } = await supabase.auth.signOut()
      
      if (error) {
        console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error)
        alert('Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      } else {
        console.log('Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ')
        // Î°úÍ∑∏ÏïÑÏõÉ ÌõÑ onboardingÏúºÎ°ú Ïù¥Îèô
        setCurrentStep('onboarding')
        // URL ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞
        window.history.replaceState({}, '', '/')
      }
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ ÏòàÏô∏:', error)
      alert('Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  if (currentStep === "onboarding") {
  return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        {/* Ïû•ÏãùÏ†Å Ìå®ÌÑ¥ */}
        <div className="absolute top-8 left-8 w-12 h-12 border-2 border-amber-400/30 border-dashed rounded-lg"></div>
        <div className="absolute top-8 right-8 w-12 h-12 border-2 border-amber-400/30 border-dashed rounded-lg"></div>
        <div className="absolute bottom-8 left-8 w-12 h-12 border-2 border-amber-400/30 border-dashed rounded-lg"></div>
        <div className="absolute bottom-8 right-8 w-12 h-12 border-2 border-amber-400/30 border-dashed rounded-lg"></div>

        {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
        <div className="text-center max-w-4xl mx-auto">
          {/* ÏÑúÎπÑÏä§ ÏÜåÍ∞ú Ïπ¥Îìú */}
          <div className="relative mb-12">
            <div className="flex items-center justify-center mb-8">
              {/* Î™®Î∞îÏùº Í∏∞Í∏∞ 1 */}
              <div className="relative transform -rotate-12 mr-8">
                <div className="w-64 h-96 bg-white rounded-3xl p-4 shadow-2xl">
                  <div className="w-full h-full bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl p-4 flex flex-col">
                    <div className="text-amber-400 text-lg font-bold mb-4">Í¥ÄÏÉÅ Î∂ÑÏÑù</div>
                    <div className="flex-1 flex flex-col justify-center space-y-3">
                      <div className="bg-amber-400/20 rounded-lg p-3">
                        <div className="text-amber-400 text-sm font-semibold">Îàà</div>
                        <div className="text-white text-xs">Îî∞ÎúªÌïòÍ≥† Í∞êÏÑ±Ï†Å</div>
                      </div>
                      <div className="bg-amber-400/20 rounded-lg p-3">
                        <div className="text-amber-400 text-sm font-semibold">ÏΩî</div>
                        <div className="text-white text-xs">ÏùòÏßÄÍ∞Ä Í∞ïÌï®</div>
                      </div>
                      <div className="bg-amber-400/20 rounded-lg p-3">
                        <div className="text-amber-400 text-sm font-semibold">ÏûÖ</div>
                        <div className="text-white text-xs">ÏÜåÌÜµ Îä•Î†• Ïö∞Ïàò</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Î™®Î∞îÏùº Í∏∞Í∏∞ 2 */}
              <div className="relative transform rotate-6">
                <div className="w-64 h-96 bg-white rounded-3xl p-4 shadow-2xl">
                  <div className="w-full h-full bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl p-4 flex flex-col">
                    <div className="text-amber-400 text-lg font-bold mb-4">ÏÇ¨Ï£º Î∂ÑÏÑù</div>
                    <div className="flex-1 flex flex-col justify-center items-center space-y-4">
                      <div className="w-32 h-32 rounded-full bg-gradient-to-br from-amber-400/30 to-amber-600/30 flex items-center justify-center">
                        <div className="text-amber-400 text-2xl">üåü</div>
                      </div>
                      <div className="text-center">
                        <div className="text-amber-400 font-semibold mb-2">Ïó∞Ïï†Ïö¥ ÏÉÅÏäπ</div>
                        <div className="text-white text-sm">Ïù¥ÏÉÅÏ†ÅÏù∏ ÎßåÎÇ® ÏòàÏ†ï</div>
                      </div>
                      <button className="bg-amber-400 text-black px-6 py-2 rounded-full text-sm font-semibold">
                        START
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* ÏÑúÎπÑÏä§ ÏÑ§Î™Ö ÌÖçÏä§Ìä∏ */}
            <div className="text-right">
              <h2 className="text-2xl font-bold text-white mb-2">Ïò§Î°úÏßÄ ÎãπÏã†ÎßåÏùÑ ÏúÑÌïú</h2>
              <h1 className="text-4xl font-bold text-amber-400 mb-4">ÏÑ∏ÏÉÅÏóê Îã® ÌïòÎÇòÎøêÏù∏ Í¥ÄÏÉÅ ÏÇ¨Ï£º Îß§Ïπ≠</h1>
              <h3 className="text-3xl font-bold text-amber-400">Í¥ÄÏÉÅÏùÄ Í≥ºÌïôÏù¥Îã§</h3>
            </div>
          </div>

          {/* ÏãúÏûë Î≤ÑÌäº */}
          <button
            onClick={() => {
              console.log('Ïö¥Î™Ö Ï∞æÍ∏∞ ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠Îê®')
              setCurrentStep("login")
              console.log('currentStepÏùÑ loginÏúºÎ°ú ÏÑ§Ï†ïÌï®')
            }}
            className="bg-amber-400 hover:bg-amber-500 text-black px-12 py-4 rounded-full text-xl font-bold transition-colors shadow-lg"
          >
            Ïö¥Î™Ö Ï∞æÍ∏∞ ÏãúÏûë
          </button>
        </div>

        {/* Ï†êÏÑ† ÌÖåÎëêÎ¶¨ */}
        <div className="absolute inset-4 border-2 border-amber-400/20 border-dashed rounded-3xl pointer-events-none"></div>
      </div>
    )
  }

  if (currentStep === "signup") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        <div className="text-center max-w-md mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8">ÌöåÏõêÍ∞ÄÏûÖ</h1>
          
          <div className="bg-white/10 rounded-2xl p-8 mb-6">
            <div className="space-y-4">
              <div>
                <label className="block text-left text-white mb-2">Ïù¥Î©îÏùº</label>
                <input
                  type="email"
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-left text-white mb-2">ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                <input
                  type="password"
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-left text-white mb-2">ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏</label>
                <input
                  type="password"
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
            </div>
          </div>

          <button
            onClick={() => {
              // Í∞ÑÎã®Ìïú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ (Ïã§Ï†úÎ°úÎäî Îçî ÏóÑÍ≤©ÌïòÍ≤å)
              const email = document.querySelector('input[type="email"]') as HTMLInputElement
              const password = document.querySelector('input[type="password"]') as HTMLInputElement
              
              if (!email?.value || !password?.value) {
                alert('Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                return
              }
              
              // Î°úÏª¨ ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
              handleLocalLogin(email.value, password.value)
            }}
            className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors mb-4 w-full"
          >
            ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å
          </button>



          <div className="text-center space-y-4">
            <button
              onClick={() => setCurrentStep("login")}
              className="text-amber-400 hover:text-amber-300 text-sm transition-colors block w-full"
            >
              Ïù¥ÎØ∏ Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? Î°úÍ∑∏Ïù∏ÌïòÍ∏∞
            </button>
            
            <div className="text-center">
              <span className="text-white/60 text-sm">ÎòêÎäî</span>
            </div>
            
            <button
              onClick={handleGoogleSignUp}
              className="bg-white hover:bg-gray-100 text-gray-800 px-8 py-3 rounded-full text-lg font-semibold transition-colors mb-3 w-full flex items-center justify-center"
            >
              <span className="mr-2">üîç</span>
              GoogleÎ°ú ÌöåÏõêÍ∞ÄÏûÖ
            </button>

            <button
              onClick={handleKakaoSignUp}
              className="bg-yellow-400 hover:bg-yellow-500 text-black px-8 py-3 rounded-full text-lg font-semibold transition-colors w-full flex items-center justify-center"
            >
              <span className="mr-2">üí¨</span>
              Ïπ¥Ïπ¥Ïò§Î°ú ÌöåÏõêÍ∞ÄÏûÖ
            </button>
          </div>
        </div>
      </div>
    )
  }

  if (currentStep === "login") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        <div className="text-center max-w-md mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8">Î°úÍ∑∏Ïù∏</h1>
          
          <div className="bg-white/10 rounded-2xl p-8 mb-6">
            <div className="space-y-4">
              <div>
                <label className="block text-left text-white mb-2">Ïù¥Î©îÏùº</label>
                <input
                  type="email"
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-left text-white mb-2">ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                <input
                  type="password"
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
            </div>
          </div>

          <button
            onClick={() => {
              // Í∞ÑÎã®Ìïú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
              const email = document.querySelector('input[type="email"]') as HTMLInputElement
              const password = document.querySelector('input[type="password"]') as HTMLInputElement
              
              if (!email?.value || !password?.value) {
                alert('Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                return
              }
              
              // Î°úÏª¨ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
              handleLocalLogin(email.value, password.value)
            }}
            className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors mb-4 w-full"
          >
            Î°úÍ∑∏Ïù∏
          </button>

          <div className="text-center space-y-4">
            <button
              onClick={() => setCurrentStep("signup")}
              className="text-amber-400 hover:text-amber-300 text-sm transition-colors block w-full"
            >
              Í≥ÑÏ†ïÏù¥ ÏóÜÏúºÏã†Í∞ÄÏöî? ÌöåÏõêÍ∞ÄÏûÖÌïòÍ∏∞
            </button>
            
            <div className="text-center">
              <span className="text-white/60 text-sm">ÎòêÎäî</span>
            </div>
            
            <button
              onClick={handleGoogleSignUp}
              className="bg-white hover:bg-gray-100 text-gray-800 px-8 py-3 rounded-full text-lg font-semibold transition-colors mb-3 w-full flex items-center justify-center"
            >
              <span className="mr-2">üîç</span>
              GoogleÎ°ú Î°úÍ∑∏Ïù∏
            </button>

            <button
              onClick={handleKakaoSignUp}
              className="bg-yellow-400 hover:bg-yellow-500 text-black px-8 py-3 rounded-full text-lg font-semibold transition-colors w-full flex items-center justify-center"
            >
              <span className="mr-2">üí¨</span>
              Ïπ¥Ïπ¥Ïò§Î°ú Î°úÍ∑∏Ïù∏
            </button>
          </div>
        </div>
      </div>
    )
  }

  // OAuth Ïù∏Ï¶ù Ï§ë ÌôîÎ©¥
  if (isAuthenticating) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        <div className="text-center max-w-md mx-auto">
          <div className="animate-spin rounded-full h-24 w-24 border-b-2 border-amber-400 mx-auto mb-6"></div>
          <h1 className="text-3xl font-bold text-amber-400 mb-4">
            {authProvider === "google" ? "Google" : "Ïπ¥Ïπ¥Ïò§"} ÌöåÏõêÍ∞ÄÏûÖ ÏßÑÌñâ Ï§ë
          </h1>
          <p className="text-xl text-white mb-6">
            {authProvider === "google" ? "Google" : "Ïπ¥Ïπ¥Ïò§"}ÏóêÏÑú Ïù∏Ï¶ùÏùÑ ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§.
          </p>
          <div className="bg-white/10 rounded-2xl p-6">
            <p className="text-white/80 text-sm">
              ÌåùÏóÖ Ï∞ΩÏù¥ Ïó¥Î†∏Îã§Î©¥ Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.
            </p>
            <p className="text-white/60 text-xs mt-2">
              ÌåùÏóÖÏù¥ Ï∞®Îã®Îêú Í≤ΩÏö∞ Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.
            </p>
          </div>
          <button
            onClick={() => {
              setIsAuthenticating(false)
              setAuthProvider(null)
            }}
            className="text-amber-400 hover:text-amber-300 text-sm transition-colors mt-6"
          >
            Ï∑®ÏÜåÌïòÍ≥† ÎèåÏïÑÍ∞ÄÍ∏∞
          </button>
        </div>
      </div>
    )
  }

  // ÌîÑÎ°úÌïÑ Îì±Î°ù ÌéòÏù¥ÏßÄ
  if (currentStep === "profile") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        <div className="max-w-2xl mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8 text-center">ÌîÑÎ°úÌïÑ Îì±Î°ù</h1>
          <p className="text-xl text-white mb-8 text-center">ÎãπÏã†ÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî</p>
          
          <div className="bg-white/10 rounded-2xl p-8">
            <div className="space-y-6">
              {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-white mb-2">ÎãâÎÑ§ÏûÑ *</label>
                  <input
                    type="text"
                    value={profileData.nickname}
                    onChange={(e) => handleInputChange("nickname", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                    placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                  {errors.nickname && <p className="text-red-400 text-sm mt-1">{errors.nickname}</p>}
                </div>
                
                <div>
                  <label className="block text-white mb-2">ÏÑ±Î≥Ñ *</label>
                  <select
                    value={profileData.gender}
                    onChange={(e) => handleInputChange("gender", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  >
                    <option value="">ÏÑ±Î≥Ñ ÏÑ†ÌÉù</option>
                    <option value="ÎÇ®ÏÑ±">ÎÇ®ÏÑ±</option>
                    <option value="Ïó¨ÏÑ±">Ïó¨ÏÑ±</option>
                  </select>
                  {errors.gender && <p className="text-red-400 text-sm mt-1">{errors.gender}</p>}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-white mb-2">ÏÉùÎÖÑÏõîÏùº *</label>
                  <input
                    type="date"
                    value={profileData.birthDate}
                    onChange={(e) => handleInputChange("birthDate", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  />
                  {errors.birthDate && <p className="text-red-400 text-sm mt-1">{errors.birthDate}</p>}
                </div>
                
                <div>
                  <label className="block text-white mb-2">Ï∂úÏÉù ÏãúÍ∞Ñ</label>
                  <select
                    value={profileData.birthTime}
                    onChange={(e) => handleInputChange("birthTime", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  >
                    <option value="">ÏóÜÏùå</option>
                    <option value="00:00">ÏûêÏãú (23:00-01:00)</option>
                    <option value="02:00">Ï∂ïÏãú (01:00-03:00)</option>
                    <option value="04:00">Ïù∏Ïãú (03:00-05:00)</option>
                    <option value="06:00">Î¨òÏãú (05:00-07:00)</option>
                    <option value="08:00">ÏßÑÏãú (07:00-09:00)</option>
                    <option value="10:00">ÏÇ¨Ïãú (09:00-11:00)</option>
                    <option value="12:00">Ïò§Ïãú (11:00-13:00)</option>
                    <option value="14:00">ÎØ∏Ïãú (13:00-15:00)</option>
                    <option value="16:00">Ïã†Ïãú (15:00-17:00)</option>
                    <option value="18:00">Ïú†Ïãú (17:00-19:00)</option>
                    <option value="20:00">Ïà†Ïãú (19:00-21:00)</option>
                    <option value="22:00">Ìï¥Ïãú (21:00-23:00)</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-white mb-2">Í±∞Ï£º ÏßÄÏó≠ *</label>
                  <select
                    value={profileData.region}
                    onChange={(e) => handleInputChange("region", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  >
                    <option value="">ÏßÄÏó≠ ÏÑ†ÌÉù</option>
                    <option value="ÏÑúÏö∏">ÏÑúÏö∏</option>
                    <option value="Í≤ΩÍ∏∞">Í≤ΩÍ∏∞</option>
                    <option value="Ïù∏Ï≤ú">Ïù∏Ï≤ú</option>
                    <option value="Î∂ÄÏÇ∞">Î∂ÄÏÇ∞</option>
                    <option value="ÎåÄÍµ¨">ÎåÄÍµ¨</option>
                    <option value="Í¥ëÏ£º">Í¥ëÏ£º</option>
                    <option value="ÎåÄÏ†Ñ">ÎåÄÏ†Ñ</option>
                    <option value="Ïö∏ÏÇ∞">Ïö∏ÏÇ∞</option>
                    <option value="Í∞ïÏõê">Í∞ïÏõê</option>
                    <option value="Ï∂©Î∂Å">Ï∂©Î∂Å</option>
                    <option value="Ï∂©ÎÇ®">Ï∂©ÎÇ®</option>
                    <option value="Ï†ÑÎ∂Å">Ï†ÑÎ∂Å</option>
                    <option value="Ï†ÑÎÇ®">Ï†ÑÎÇ®</option>
                    <option value="Í≤ΩÎ∂Å">Í≤ΩÎ∂Å</option>
                    <option value="Í≤ΩÎÇ®">Í≤ΩÎÇ®</option>
                    <option value="Ï†úÏ£º">Ï†úÏ£º</option>
                  </select>
                  {errors.region && <p className="text-red-400 text-sm mt-1">{errors.region}</p>}
                </div>
                
                <div>
                  <label className="block text-white mb-2">ÌÇ§</label>
                  <input
                    type="text"
                    value={profileData.height}
                    onChange={(e) => handleInputChange("height", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                    placeholder="Ïòà: 170cm"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-white mb-2">Ï≤¥Ìòï</label>
                  <select
                    value={profileData.bodyType}
                    onChange={(e) => handleInputChange("bodyType", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  >
                    <option value="">Ï≤¥Ìòï ÏÑ†ÌÉù</option>
                    <option value="ÎßàÎ•∏ Ï≤¥Ìòï">ÎßàÎ•∏ Ï≤¥Ìòï</option>
                    <option value="Î≥¥ÌÜµ Ï≤¥Ìòï">Î≥¥ÌÜµ Ï≤¥Ìòï</option>
                    <option value="ÌÜµÌÜµÌïú Ï≤¥Ìòï">ÌÜµÌÜµÌïú Ï≤¥Ìòï</option>
                    <option value="Í∑ºÏú°Ïßà Ï≤¥Ìòï">Í∑ºÏú°Ïßà Ï≤¥Ìòï</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-white mb-2">ÏßÅÏóÖ *</label>
                  <input
                    type="text"
                    value={profileData.job}
                    onChange={(e) => handleInputChange("job", e.target.value)}
                    className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                    placeholder="ÏßÅÏóÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                  {errors.job && <p className="text-red-400 text-sm mt-1">{errors.job}</p>}
                </div>
              </div>

              <div>
                <label className="block text-white mb-2">ÌïôÎ†•</label>
                <select
                  value={profileData.education}
                  onChange={(e) => handleInputChange("education", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                >
                  <option value="">ÌïôÎ†• ÏÑ†ÌÉù</option>
                  <option value="Í≥†Îì±ÌïôÍµê Ï°∏ÏóÖ">Í≥†Îì±ÌïôÍµê Ï°∏ÏóÖ</option>
                  <option value="ÎåÄÌïôÍµê Ïû¨Ìïô">ÎåÄÌïôÍµê Ïû¨Ìïô</option>
                  <option value="ÎåÄÌïôÍµê Ï°∏ÏóÖ">ÎåÄÌïôÍµê Ï°∏ÏóÖ</option>
                  <option value="ÎåÄÌïôÏõê Ïû¨Ìïô">ÎåÄÌïôÏõê Ïû¨Ìïô</option>
                  <option value="ÎåÄÌïôÏõê Ï°∏ÏóÖ">ÎåÄÌïôÏõê Ï°∏ÏóÖ</option>
                </select>
              </div>

              <div>
                <label className="block text-white mb-2">ÏûêÍ∏∞ÏÜåÍ∞ú</label>
                <textarea
                  value={profileData.introduction}
                  onChange={(e) => handleInputChange("introduction", e.target.value)}
                  rows={4}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none resize-none"
                  placeholder="ÏûêÏã†ÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî (ÏµúÎåÄ 1000Ïûê)"
                />
                <div className="text-right text-sm text-gray-400 mt-1">
                  {profileData.introduction.length}/1000
                </div>
              </div>

              {/* Ï∂îÍ∞Ä ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú */}
              <div>
                <label className="block text-white mb-2">Ï∂îÍ∞Ä ÏÇ¨ÏßÑ (ÏµúÎåÄ 5Ïû•)</label>
                <div className="bg-white/10 rounded-lg p-4 border-2 border-dashed border-white/30">
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleAdditionalPhotoUpload}
                    className="hidden"
                    id="additional-photo-upload"
                  />
                  <label
                    htmlFor="additional-photo-upload"
                    className="flex flex-col items-center justify-center cursor-pointer"
                  >
                    <div className="text-4xl mb-2">üì∏</div>
                    <p className="text-white text-center mb-2">ÌÅ¥Î¶≠ÌïòÏó¨ ÏÇ¨ÏßÑ Ï∂îÍ∞Ä</p>
                    <p className="text-gray-400 text-sm text-center">Ïó¨Îü¨ Ïû• ÏÑ†ÌÉù Í∞ÄÎä•</p>
                  </label>
                </div>
                
                {/* ÏóÖÎ°úÎìúÎêú Ï∂îÍ∞Ä ÏÇ¨ÏßÑÎì§ */}
                {additionalPhotos.length > 0 && (
                  <div className="mt-4">
                    <p className="text-white mb-2">ÏóÖÎ°úÎìúÎêú ÏÇ¨ÏßÑ ({additionalPhotos.length}/5)</p>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {additionalPhotos.map((photo, index) => (
                        <div key={index} className="relative">
                          <img
                            src={photo}
                            alt={`Ï∂îÍ∞Ä ÏÇ¨ÏßÑ ${index + 1}`}
                            className="w-full h-24 object-cover rounded-lg"
                          />
                          <button
                            onClick={() => removeAdditionalPhoto(index)}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm hover:bg-red-600"
                          >
                            √ó
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Ïù¥ÏÉÅÌòï ÌÇ§ÏõåÎìú ÏÑ†ÌÉù */}
              <div>
                <label className="block text-white mb-2">Ïù¥ÏÉÅÌòï ÌÇ§ÏõåÎìú (ÏµúÎåÄ 3Í∞ú)</label>
                <div className="flex flex-wrap gap-2">
                  {IDEAL_TYPE_KEYWORDS.map((keyword) => (
                    <button
                      key={keyword}
                      onClick={() => handleIdealTypeToggle(keyword)}
                      className={`px-3 py-2 rounded-full text-sm transition-colors ${
                        selectedIdealKeywords.includes(keyword)
                          ? "bg-amber-400 text-black"
                          : "bg-white/20 text-white hover:bg-white/30"
                      }`}
                    >
                      {keyword}
                    </button>
                  ))}
                </div>
                <p className="text-sm text-gray-400 mt-2">
                  ÏÑ†ÌÉùÎêú ÌÇ§ÏõåÎìú: {selectedIdealKeywords.join(", ") || "ÏóÜÏùå"}
                </p>
              </div>
            </div>

            {/* ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex flex-col sm:flex-row gap-4 mt-8">
              <button
                onClick={() => setCurrentStep("integrated-analysis")}
                className="flex-1 bg-white/20 hover:bg-white/30 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors border border-white/30"
              >
                Îí§Î°ú Í∞ÄÍ∏∞
              </button>
              <button
                onClick={() => {
                  if (validateProfile()) {
                    setCurrentStep("home") // Î∞îÎ°ú Îß§Ïπ≠ Í≤∞Í≥º ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    setIntegratedAnalysisStep("photo") // ÏÉÅÌÉú Ï¥àÍ∏∞ÌôîÎ°ú Î¶¨Ìè¨Ìä∏ ÌôîÎ©¥ Î†åÎçîÎßÅ Î∞©ÏßÄ
                  }
                }}
                className="flex-1 bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors"
              >
                ÌîÑÎ°úÌïÑ ÏôÑÎ£å
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Ìôà ÌôîÎ©¥ (Îß§Ïπ≠ Í≤∞Í≥º ÌéòÏù¥ÏßÄ) - currentStepÏùÑ Î®ºÏ†Ä Ï≤¥ÌÅ¨
  if (currentStep === "home") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8 text-center">üíï Ïù¥ÏÉÅÌòï Îß§Ïπ≠</h1>
          <p className="text-xl text-white mb-8 text-center">AIÍ∞Ä ÎãπÏã†Í≥º Ïûò ÎßûÎäî ÏÇ¨ÎûåÎì§ÏùÑ Ï∞æÏïòÏäµÎãàÎã§!</p>
          
          {/* Îß§Ïπ≠ Í≤∞Í≥º ÌëúÏãú */}
          <div className="space-y-6">
            {dummyMatches.map((match, index) => (
              <div key={index} className="bg-white/10 rounded-2xl p-6 border border-white/20">
                <div className="flex flex-col md:flex-row gap-6">
                  {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ */}
                  <div className="flex-shrink-0">
                    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center text-4xl">
                      üë§
                    </div>
                  </div>
                  
                  {/* ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ */}
                  <div className="flex-1">
                    <div className="flex items-center gap-4 mb-4">
                      <h3 className="text-2xl font-bold text-amber-400">{match.name}</h3>
                      <span className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                        {match.totalCompatibility}% Í∂ÅÌï©
                      </span>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÎÇòÏù¥:</span> {match.age}ÏÑ∏</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÏßÅÏóÖ:</span> {match.job}</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÏßÄÏó≠:</span> {match.region}</p>
                      </div>
                      <div>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÌÇ§:</span> {match.height}</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÌïôÎ†•:</span> {match.education}</p>
                      </div>
                    </div>
                    
                    <p className="text-gray-300 mb-4">{match.introduction}</p>
                    
                    {/* Í∂ÅÌï© Î∂ÑÏÑù */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div className="bg-green-500/20 rounded-lg p-3">
                        <p className="text-green-400 font-semibold mb-1">Í¥ÄÏÉÅ Í∂ÅÌï©</p>
                        <p className="text-white text-sm">{match.faceAnalysis}</p>
                      </div>
                      <div className="bg-blue-500/20 rounded-lg p-3">
                        <p className="text-blue-400 font-semibold mb-1">ÏÇ¨Ï£º Í∂ÅÌï©</p>
                        <p className="text-white text-sm">{match.sajuAnalysis}</p>
                      </div>
                    </div>
                    
                    {/* ÌÇ§ÏõåÎìú */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {match.keywords.map((keyword, idx) => (
                        <span key={idx} className="bg-amber-400/20 text-amber-400 px-2 py-1 rounded-full text-xs border border-amber-400">
                          {keyword}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                
                {/* Ïï°ÏÖò Î≤ÑÌäº */}
                <div className="flex flex-col sm:flex-row gap-3 mt-6">
                  <button
                    onClick={() => {
                      setSelectedUser(match)
                      setCurrentStep("other-profile")
                    }}
                    className="flex-1 bg-white/20 hover:bg-white/30 text-white px-6 py-3 rounded-full font-bold transition-colors border border-white/30"
                  >
                    ÌîÑÎ°úÌïÑ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞
                  </button>
                  <button
                    onClick={() => {
                      setSelectedUser(match)
                      initializeChatMessages(match.name)
                      setCurrentStep("dm-chat")
                    }}
                    className="flex-1 bg-amber-400 hover:bg-amber-500 text-black px-6 py-3 rounded-full font-bold transition-colors"
                  >
                    üí¨ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
                  </button>
                </div>
              </div>
            ))}
          </div>
          
          {/* ÌïòÎã® Î≤ÑÌäº */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
            <button
              onClick={() => setCurrentStep("my-profile")}
              className="bg-white/20 hover:bg-white/30 text-white px-6 py-3 rounded-full font-bold transition-colors border border-white/30"
            >
              ÎÇòÏùò ÌîÑÎ°úÌïÑ Î≥¥Í∏∞
            </button>
            <button
              onClick={() => alert("Îçî ÎßéÏùÄ Îß§Ïπ≠ Í≤∞Í≥ºÎ•º Î≥¥Î†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî!")}
              className="bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors"
            >
              Îçî ÎßéÏùÄ Îß§Ïπ≠ Î≥¥Í∏∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  // ÌîÑÎ°úÌïÑ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ ÌéòÏù¥ÏßÄ
  if (currentStep === "other-profile" && selectedUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          {/* Ìó§Îçî */}
          <div className="text-center mb-8">
            <button
              onClick={() => setCurrentStep("home")}
              className="absolute left-6 top-6 bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-full font-semibold transition-colors border border-white/30"
            >
              ‚Üê Îí§Î°ú Í∞ÄÍ∏∞
            </button>
            <h1 className="text-4xl font-bold text-amber-400">{selectedUser.name}ÎãòÏùò ÌîÑÎ°úÌïÑ</h1>
            <p className="text-xl text-white mt-2">Îçî ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî</p>
          </div>

          {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ ÏÑπÏÖò */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8 text-center">
            <div className="w-48 h-48 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center text-8xl mx-auto mb-6">
              üë§
            </div>
            <div className="bg-green-500 text-white px-6 py-2 rounded-full text-lg font-bold inline-block">
              {selectedUser.totalCompatibility}% Í∂ÅÌï©
            </div>
          </div>

          {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">Í∏∞Î≥∏ Ï†ïÎ≥¥</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">ÎÇòÏù¥</label>
                  <p className="text-white text-lg">{selectedUser.age}ÏÑ∏</p>
                </div>
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">ÏßÅÏóÖ</label>
                  <p className="text-white text-lg">{selectedUser.job}</p>
                </div>
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">ÏßÄÏó≠</label>
                  <p className="text-white text-lg">{selectedUser.region}</p>
                </div>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">ÌÇ§</label>
                  <p className="text-white text-lg">{selectedUser.height}</p>
                </div>
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">ÌïôÎ†•</label>
                  <p className="text-white text-lg">{selectedUser.education}</p>
                </div>
                <div>
                  <label className="block text-amber-400 font-semibold mb-2">Ï≤¥Ìòï</label>
                  <p className="text-white text-lg">{selectedUser.bodyType || "Ï†ïÎ≥¥ ÏóÜÏùå"}</p>
                </div>
              </div>
            </div>
          </div>

          {/* ÏûêÍ∏∞ÏÜåÍ∞ú */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">ÏûêÍ∏∞ÏÜåÍ∞ú</h2>
            <p className="text-white text-lg leading-relaxed">{selectedUser.introduction}</p>
          </div>

          {/* Í∂ÅÌï© Î∂ÑÏÑù ÏÉÅÏÑ∏ */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">Í∂ÅÌï© Î∂ÑÏÑù</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-green-500/20 rounded-xl p-6 border border-green-400/30">
                <h3 className="text-xl font-bold text-green-400 mb-4">Í¥ÄÏÉÅ Í∂ÅÌï©</h3>
                <p className="text-white leading-relaxed">{selectedUser.faceAnalysis}</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-green-400 font-semibold">Í∂ÅÌï©ÎèÑ</span>
                    <span className="text-white font-bold">85%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-green-400 h-2 rounded-full" style={{ width: '85%' }}></div>
                  </div>
                </div>
              </div>
              <div className="bg-blue-500/20 rounded-xl p-6 border border-blue-400/30">
                <h3 className="text-xl font-bold text-blue-400 mb-4">ÏÇ¨Ï£º Í∂ÅÌï©</h3>
                <p className="text-white leading-relaxed">{selectedUser.sajuAnalysis}</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-blue-400 font-semibold">Í∂ÅÌï©ÎèÑ</span>
                    <span className="text-white font-bold">78%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-blue-400 h-2 rounded-full" style={{ width: '78%' }}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* ÌÇ§ÏõåÎìú */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">ÏÑ±Ìñ• ÌÇ§ÏõåÎìú</h2>
            <div className="flex flex-wrap gap-3">
              {selectedUser.keywords.map((keyword: string, idx: number) => (
                <span key={idx} className="bg-amber-400/20 text-amber-400 px-4 py-2 rounded-full text-sm font-semibold border border-amber-400">
                  {keyword}
                </span>
              ))}
            </div>
          </div>

          {/* Ïï°ÏÖò Î≤ÑÌäº */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={() => setCurrentStep("home")}
              className="bg-white/20 hover:bg-white/30 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors border border-white/30"
            >
              Îß§Ïπ≠ Î™©Î°ùÏúºÎ°ú
            </button>
            <button
              onClick={() => {
                initializeChatMessages(selectedUser.name)
                setCurrentStep("dm-chat")
              }}
              className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors"
            >
              üí¨ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
            </button>
          </div>

          {/* ÏÉÅÎåÄÎ∞© Í¥ÄÏÉÅ Î∂ÑÏÑù */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">üé≠ {selectedUser.name}ÎãòÏùò Í¥ÄÏÉÅ Î∂ÑÏÑù</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-green-500/20 rounded-xl p-6 border border-green-400/30">
                <h3 className="text-xl font-bold text-green-400 mb-4">ÎààÏùò ÌäπÏßï</h3>
                <p className="text-white leading-relaxed">ÌÅ∞ ÎààÍ≥º Í∏¥ ÏÜçÎààÏçπÏúºÎ°ú Í∞êÏ†ï ÌëúÌòÑÏù¥ ÌíçÎ∂ÄÌïòÍ≥† ÏßÅÍ¥ÄÎ†•Ïù¥ Îõ∞Ïñ¥ÎÇ©ÎãàÎã§. ÎààÍº¨Î¶¨Í∞Ä ÏÇ¥Ïßù Ïò¨ÎùºÍ∞Ñ ÌòïÌÉúÎ°ú ÏûêÏã†Í∞ê ÏûàÍ≥† Î¶¨ÎçîÏã≠ÏùÑ Í∞ÄÏßÑ Ïù∏ÏÉÅÏùÑ Ï§çÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-green-400 font-semibold">ÏßÅÍ¥ÄÎ†•</span>
                    <span className="text-white font-bold">92%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-green-400 h-2 rounded-full" style={{ width: '92%' }}></div>
                  </div>
                </div>
              </div>
              <div className="bg-blue-500/20 rounded-xl p-6 border border-blue-400/30">
                <h3 className="text-xl font-bold text-blue-400 mb-4">ÏûÖÏùò ÌäπÏßï</h3>
                <p className="text-white leading-relaxed">ÏûÖÍº¨Î¶¨Í∞Ä Ïò¨ÎùºÍ∞Ñ ÎØ∏ÏÜåÎäî Í∏çÏ†ïÏ†ÅÏù¥Í≥† ÏπúÍ∑ºÌïú ÏÑ±Í≤©ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. ÎßêÏîÄÏù¥ ÎßéÍ≥† ÎåÄÌôîÎ•º Ï¶êÍ∏∞Î©∞, ÌÉÄÏù∏Í≥ºÏùò ÏÜåÌÜµÏóê Îä•ÏàôÌï©ÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-blue-400 font-semibold">ÏÜåÌÜµÎ†•</span>
                    <span className="text-white font-bold">88%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-blue-400 h-2 rounded-full" style={{ width: '88%' }}></div>
                  </div>
                </div>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-purple-500/20 rounded-xl p-6 border border-purple-400/30">
                <h3 className="text-xl font-bold text-purple-400 mb-4">Ïù¥ÎßàÏôÄ ÌÑ±</h3>
                <p className="text-white leading-relaxed">ÎÑìÏùÄ Ïù¥ÎßàÎäî ÏßÄÏ†Å Îä•Î†•Í≥º Ï∞ΩÏùòÏÑ±ÏùÑ, Í∞ÅÏßÑ ÌÑ±ÏùÄ ÏùòÏßÄÎ†•Í≥º Í≤∞Îã®Î†•ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. Î¨∏Ï†ú Ìï¥Í≤∞ Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇòÍ≥† Î™©Ìëú Îã¨ÏÑ±Ïóê ÏßëÏ§ëÌïòÎäî ÏÑ±Ìñ•ÏûÖÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-purple-400 font-semibold">ÏßÄÏ†Å Îä•Î†•</span>
                    <span className="text-white font-bold">85%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-purple-400 h-2 rounded-full" style={{ width: '85%' }}></div>
                  </div>
                </div>
              </div>
              <div className="bg-orange-500/20 rounded-xl p-6 border border-orange-400/30">
                <h3 className="text-xl font-bold text-orange-400 mb-4">ÏΩîÏôÄ Í∑Ä</h3>
                <p className="text-white leading-relaxed">ÏßÅÏÑ†Ï†ÅÏù∏ ÏΩîÎäî Ï†ïÏßÅÌïòÍ≥† ÏÜîÏßÅÌïú ÏÑ±Í≤©ÏùÑ, Í∑ÄÏùò ÏúÑÏπòÎäî Í∑†Ìòï Ïû°Ìûå ÌåêÎã®Î†•ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. Í∞êÏ†ïÏ†ÅÏù¥Í∏∞Î≥¥Îã§Îäî Ïù¥ÏÑ±Ï†ÅÏúºÎ°ú ÏÉÅÌô©ÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-orange-400 font-semibold">ÌåêÎã®Î†•</span>
                    <span className="text-white font-bold">90%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-orange-400 h-2 rounded-full" style={{ width: '90%' }}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* ÏÉÅÎåÄÎ∞© ÏÇ¨Ï£º Î∂ÑÏÑù */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">üîÆ {selectedUser.name}ÎãòÏùò ÏÇ¨Ï£º Î∂ÑÏÑù</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-red-500/20 rounded-xl p-6 border border-red-400/30">
                <h3 className="text-xl font-bold text-red-400 mb-4">ÏùºÍ∞Ñ (Êó•Âπ≤) - {selectedUser.name}ÎãòÏùò Î≥∏ÏÑ±</h3>
                <p className="text-white leading-relaxed">ÏùºÍ∞ÑÏù¥ Í∞ïÌïú Ìé∏ÏúºÎ°ú ÎèÖÎ¶ΩÏ†ÅÏù¥Í≥† ÏûêÏ£ºÏ†ÅÏù∏ ÏÑ±Í≤©ÏûÖÎãàÎã§. Î¶¨ÎçîÏã≠Ïù¥ Îõ∞Ïñ¥ÎÇòÎ©∞, ÏûêÏã†Ïùò ÏùòÍ≤¨ÏùÑ Î™ÖÌôïÌïòÍ≤å ÌëúÌòÑÌïòÎäî ÏÑ±Ìñ•Ïù¥ ÏûàÏäµÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-red-400 font-semibold">ÎèÖÎ¶ΩÏÑ±</span>
                    <span className="text-white font-bold">87%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-red-400 h-2 rounded-full" style={{ width: '87%' }}></div>
                  </div>
                </div>
              </div>
              <div className="bg-yellow-500/20 rounded-xl p-6 border border-yellow-400/30">
                <h3 className="text-xl font-bold text-yellow-400 mb-4">Ïò§Ìñâ Í∑†Ìòï</h3>
                <p className="text-white leading-relaxed">Î™©(Êú®)Í≥º Ìôî(ÁÅ´)Ïùò Í∏∞Ïö¥Ïù¥ Í∞ïÌïòÏó¨ Ï∞ΩÏùòÏ†ÅÏù¥Í≥† Ïó¥Ï†ïÏ†ÅÏù∏ ÏÑ±Í≤©ÏûÖÎãàÎã§. ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥Î•º Ï∂îÍµ¨ÌïòÎ©∞, Î≥ÄÌôîÎ•º ÎëêÎ†§ÏõåÌïòÏßÄ ÏïäÎäî ÎèÑÏ†Ñ Ï†ïÏã†ÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§.</p>
                <div className="mt-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-yellow-400 font-semibold">Ï∞ΩÏùòÏÑ±</span>
                    <span className="text-white font-bold">91%</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-yellow-400 h-2 rounded-full" style={{ width: '91%' }}></div>
                  </div>
                </div>
              </div>
            </div>
            <div className="bg-indigo-500/20 rounded-xl p-6 border border-indigo-400/30">
              <h3 className="text-xl font-bold text-indigo-400 mb-4">ÎåÄÏö¥Í≥º ÏÑ∏Ïö¥</h3>
              <p className="text-white leading-relaxed">ÌòÑÏû¨ 20ÎåÄ ÌõÑÎ∞ò~30ÎåÄ Ï¥àÎ∞òÏúºÎ°ú Ïù∏Ïó∞Í≥º Í¥ÄÍ≥ÑÏóê ÎåÄÌïú Í¥ÄÏã¨Ïù¥ ÎÜíÏïÑÏßÄÎäî ÏãúÍ∏∞ÏûÖÎãàÎã§. ÌäπÌûà Ïò¨Ìï¥Îäî ÏÉàÎ°úÏö¥ ÎßåÎÇ®Í≥º Í¥ÄÍ≥Ñ ÌòïÏÑ±Ïóê Ï¢ãÏùÄ Í∏∞Ïö¥Ïù¥ ÏûàÏúºÎ©∞, ÏßÑÏ†ïÌïú ÏÇ¨ÎûëÏùÑ Ï∞æÏùÑ Ïàò ÏûàÎäî Í∏∞ÌöåÍ∞Ä ÎßéÏäµÎãàÎã§.</p>
              <div className="mt-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-indigo-400 font-semibold">Ïù∏Ïó∞Ïö¥</span>
                  <span className="text-white font-bold">89%</span>
                </div>
                <div className="w-full bg-white/20 rounded-full h-2">
                  <div className="bg-indigo-400 h-2 rounded-full" style={{ width: '89%' }}></div>
                </div>
              </div>
            </div>
          </div>

          {/* ÎÇòÏôÄÏùò Í∂ÅÌï© Î∂ÑÏÑù */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">üíï ÎÇòÏôÄÏùò Í∂ÅÌï© Î∂ÑÏÑù</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-pink-500/20 rounded-xl p-6 border border-pink-400/30">
                <h3 className="text-xl font-bold text-pink-400 mb-4">Ï†ÑÏ≤¥ Í∂ÅÌï©ÎèÑ</h3>
                <div className="text-center">
                  <div className="text-6xl font-bold text-pink-400 mb-4">{selectedUser.totalCompatibility}%</div>
                  <p className="text-white text-lg">Îß§Ïö∞ Ï¢ãÏùÄ Í∂ÅÌï©ÏûÖÎãàÎã§!</p>
                  <p className="text-gray-300 mt-2">ÏÑúÎ°úÎ•º Ïù¥Ìï¥ÌïòÍ≥† Î≥¥ÏôÑÌïòÎäî Í¥ÄÍ≥ÑÍ∞Ä Îê† Ïàò ÏûàÏäµÎãàÎã§.</p>
                </div>
              </div>
              <div className="bg-cyan-500/20 rounded-xl p-6 border border-cyan-400/30">
                <h3 className="text-xl font-bold text-cyan-400 mb-4">Í∂ÅÌï© Ïú†Ìòï</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-white">Í¥ÄÏÉÅ Í∂ÅÌï©</span>
                    <span className="text-cyan-400 font-bold">85%</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-white">ÏÇ¨Ï£º Í∂ÅÌï©</span>
                    <span className="text-cyan-400 font-bold">78%</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-white">ÏÑ±Í≤© Í∂ÅÌï©</span>
                    <span className="text-cyan-400 font-bold">82%</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-white">Í∞ÄÏπòÍ¥Ä Í∂ÅÌï©</span>
                    <span className="text-cyan-400 font-bold">88%</span>
                  </div>
                </div>
              </div>
            </div>
            
            {/* ÏÉÅÏÑ∏ Í∂ÅÌï© Î∂ÑÏÑù */}
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-green-500/20 to-blue-500/20 rounded-xl p-6 border border-green-400/30">
                <h3 className="text-xl font-bold text-green-400 mb-4">üéØ Í∂ÅÌï©Ïùò Ïû•Ï†ê</h3>
                <ul className="space-y-2 text-white">
                  <li className="flex items-start gap-2">
                    <span className="text-green-400 mt-1">‚úì</span>
                    <span>ÏÑúÎ°úÏùò Í∞ïÏ†êÏùÑ Ïù∏Ï†ïÌïòÍ≥† Î≥¥ÏôÑÌïòÎäî Í¥ÄÍ≥Ñ</span>
          </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-400 mt-1">‚úì</span>
                    <span>ÎåÄÌôîÍ∞Ä Ïûò ÌÜµÌïòÍ≥† Ïù¥Ìï¥Í∞Ä Îπ†Î¶Ñ</span>
          </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-400 mt-1">‚úì</span>
                    <span>Ìï®Íªò ÏÑ±Ïû•Ìï† Ïàò ÏûàÎäî ÎèôÎ∞òÏûê Í¥ÄÍ≥Ñ</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-400 mt-1">‚úì</span>
                    <span>Í∞êÏ†ïÏ†Å ÏïàÏ†ïÍ∞êÏùÑ Ï†úÍ≥µÌïòÎäî Í¥ÄÍ≥Ñ</span>
                  </li>
                </ul>
              </div>
              
              <div className="bg-gradient-to-r from-orange-500/20 to-red-500/20 rounded-xl p-6 border border-orange-400/30">
                <h3 className="text-xl font-bold text-orange-400 mb-4">‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠</h3>
                <ul className="space-y-2 text-white">
                  <li className="flex items-start gap-2">
                    <span className="text-orange-400 mt-1">!</span>
                    <span>ÏÑúÎ°úÏùò ÎèÖÎ¶ΩÏÑ±ÏùÑ Ï°¥Ï§ëÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöî</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-orange-400 mt-1">!</span>
                    <span>ÏùòÍ≤¨ Ï∞®Ïù¥Í∞Ä ÏûàÏùÑ ÎïåÎäî ÎåÄÌôîÎ°ú Ìï¥Í≤∞</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-orange-400 mt-1">!</span>
                    <span>ÏÑúÎ°úÏùò Í≥µÍ∞ÑÍ≥º ÏãúÍ∞ÑÏùÑ Ïù∏Ï†ïÌïòÍ∏∞</span>
                  </li>
                </ul>
              </div>
              
              <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-xl p-6 border border-purple-400/30">
                <h3 className="text-xl font-bold text-purple-400 mb-4">üí° Í¥ÄÍ≥Ñ Î∞úÏ†Ñ Î∞©Ìñ•</h3>
                <p className="text-white leading-relaxed mb-4">
                  Îëê ÏÇ¨ÎûåÏùÄ ÏÑúÎ°úÎ•º Ïù¥Ìï¥ÌïòÍ≥† Î≥¥ÏôÑÌïòÎäî Í¥ÄÍ≥ÑÎ°ú Î∞úÏ†ÑÌï† Ïàò ÏûàÏäµÎãàÎã§. 
                  {selectedUser.name}ÎãòÏùò Ï∞ΩÏùòÏÑ±Í≥º ÏßÅÍ¥ÄÎ†•ÏùÄ ÎãπÏã†Ïùò ÏïàÏ†ïÏÑ±Í≥º Í∑†ÌòïÍ∞êÍ≥º Ïûò ÎßûÏúºÎ©∞, 
                  Ìï®ÍªòÌïòÎ©¥ Îçî ÌÅ∞ ÏãúÎÑàÏßÄÎ•º ÎÇº Ïàò ÏûàÎäî Ï°∞Ìï©ÏûÖÎãàÎã§.
                </p>
                <div className="text-center">
                  <div className="inline-block bg-purple-500 text-white px-6 py-2 rounded-full font-semibold">
                    üöÄ Í¥ÄÍ≥Ñ Î∞úÏ†Ñ Í∞ÄÎä•ÏÑ±: Îß§Ïö∞ ÎÜíÏùå
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Î©îÏãúÏßÄ ÌéòÏù¥ÏßÄ (dm-chat)
  if (currentStep === "dm-chat" && selectedUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col">
        {/* Ìó§Îçî */}
        <div className="bg-white/10 backdrop-blur-sm border-b border-white/20 p-4">
          <div className="flex items-center gap-4 max-w-4xl mx-auto">
            <button
              onClick={() => setCurrentStep("other-profile")}
              className="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-full font-semibold transition-colors border border-white/30"
            >
              ‚Üê Îí§Î°ú Í∞ÄÍ∏∞
            </button>
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center text-2xl">
                üë§
              </div>
              <div>
                <h2 className="text-xl font-bold text-amber-400">{selectedUser.name}</h2>
                <p className="text-sm text-gray-300">Í∂ÅÌï©ÎèÑ {selectedUser.totalCompatibility}%</p>
              </div>
            </div>
          </div>
        </div>

        {/* Î©îÏãúÏßÄ ÏòÅÏó≠ */}
        <div className="flex-1 overflow-y-auto p-4 max-w-4xl mx-auto w-full">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === "me" ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-xs md:max-w-md lg:max-w-lg px-4 py-3 rounded-2xl ${
                    message.sender === "me"
                      ? "bg-amber-400 text-black rounded-br-md"
                      : "bg-white/20 text-white rounded-bl-md"
                  }`}
                >
                  <p className="text-sm leading-relaxed">{message.text}</p>
                  <div className={`flex items-center justify-between mt-2 text-xs ${
                    message.sender === "me" ? "text-black/70" : "text-gray-300"
                  }`}>
                    <span>
                      {message.timestamp.toLocaleTimeString("ko-KR", {
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </span>
                    {message.sender === "me" && (
                      <span className="flex items-center gap-1">
                        {message.isRead ? "ÏùΩÏùå" : "Ï†ÑÏÜ°Îê®"}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Î©îÏãúÏßÄ ÏûÖÎ†• ÏòÅÏó≠ */}
        <div className="bg-white/10 backdrop-blur-sm border-t border-white/20 p-4">
          <div className="max-w-4xl mx-auto">
            <div className="flex gap-3">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && sendMessage()}
                  placeholder={`${selectedUser.name}ÎãòÏóêÍ≤å Î©îÏãúÏßÄÎ•º Î≥¥ÎÇ¥ÏÑ∏Ïöî...`}
                  className="w-full px-4 py-3 rounded-full bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none placeholder-gray-400"
                />
                <button
                  onClick={sendMessage}
                  disabled={!newMessage.trim()}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-amber-400 hover:bg-amber-500 disabled:bg-gray-500 text-black px-4 py-2 rounded-full font-semibold transition-colors disabled:cursor-not-allowed"
                >
                  Ï†ÑÏÜ°
                </button>
        </div>
            </div>
            
            {/* Îπ†Î•∏ Î©îÏãúÏßÄ Î≤ÑÌäºÎì§ */}
            <div className="flex flex-wrap gap-2 mt-3">
              {[
                "ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä",
                "ÌîÑÎ°úÌïÑ Î≥¥Í≥† Ïó∞ÎùΩÎìúÎ†∏Ïñ¥Ïöî",
                "ÏãúÍ∞Ñ ÎêòÏã§ Îïå ÎåÄÌôîÌï¥Ïöî",
                "Í∂ÅÌï© Î∂ÑÏÑùÏù¥ Ïã†Í∏∞ÌñàÏñ¥Ïöî",
                "Ïª§Ìîº Ìïú Ïûî Ïñ¥Îñ†ÏÑ∏Ïöî? ‚òï"
              ].map((quickMessage, index) => (
                <button
                  key={index}
                  onClick={() => {
                    setNewMessage(quickMessage)
                    // ÏûêÎèôÏúºÎ°ú Ï†ÑÏÜ°
                    setTimeout(() => {
                      setNewMessage(quickMessage)
                      sendMessage()
                    }, 100)
                  }}
                  className="bg-white/20 hover:bg-white/30 text-white px-3 py-2 rounded-full text-sm font-medium transition-colors border border-white/30"
                >
                  {quickMessage}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ÎÇòÏùò ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄ
  if (currentStep === "my-profile") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          {/* Ìó§Îçî */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-amber-400">ÎÇ¥ ÌîÑÎ°úÌïÑ</h1>
            <p className="text-xl text-white mt-2">ÌîÑÎ°úÌïÑÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† Ïó∞Ïï†Ïö¥ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî</p>
          </div>

          {/* ÌîÑÎ°úÌïÑ ÏàòÏ†ï ÏÑπÏÖò */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏàòÏ†ï</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÎãâÎÑ§ÏûÑ</label>
                <input
                  type="text"
                  value={profileData.nickname}
                  onChange={(e) => handleInputChange("nickname", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÏÑ±Î≥Ñ</label>
                <select
                  value={profileData.gender}
                  onChange={(e) => handleInputChange("gender", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                >
                  <option value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                  <option value="male">ÎÇ®ÏÑ±</option>
                  <option value="female">Ïó¨ÏÑ±</option>
                </select>
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÏÉùÎÖÑÏõîÏùº</label>
                <input
                  type="date"
                  value={profileData.birthDate}
                  onChange={(e) => handleInputChange("birthDate", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                />
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÏßÄÏó≠</label>
                <input
                  type="text"
                  value={profileData.region}
                  onChange={(e) => handleInputChange("region", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÏßÄÏó≠ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÌÇ§</label>
                <input
                  type="text"
                  value={profileData.height}
                  onChange={(e) => handleInputChange("height", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">Ï≤¥Ìòï</label>
                <select
                  value={profileData.bodyType}
                  onChange={(e) => handleInputChange("bodyType", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                >
                  <option value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                  <option value="slim">ÎßàÎ•∏ Ìé∏</option>
                  <option value="normal">Î≥¥ÌÜµ</option>
                  <option value="chubby">ÌÜµÌÜµÌïú Ìé∏</option>
                  <option value="muscular">Í∑ºÏú°Ïßà</option>
                </select>
              </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÏßÅÏóÖ</label>
                <input
                  type="text"
                  value={profileData.job}
                  onChange={(e) => handleInputChange("job", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                  placeholder="ÏßÅÏóÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
    </div>
              <div>
                <label className="block text-amber-400 font-semibold mb-2">ÌïôÎ†•</label>
                <select
                  value={profileData.education}
                  onChange={(e) => handleInputChange("education", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                >
                  <option value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                  <option value="high-school">Í≥†Îì±ÌïôÍµê</option>
                  <option value="college">ÎåÄÌïôÍµê</option>
                  <option value="graduate">ÎåÄÌïôÏõê</option>
                  <option value="other">Í∏∞ÌÉÄ</option>
                </select>
              </div>
            </div>
            <div className="mt-6">
              <label className="block text-amber-400 font-semibold mb-2">ÏûêÍ∏∞ÏÜåÍ∞ú</label>
              <textarea
                value={profileData.introduction}
                                  onChange={(e) => handleInputChange("introduction", e.target.value)}
                rows={4}
                className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none resize-none"
                placeholder="ÏûêÏã†ÏùÑ ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî"
              />
            </div>
            <div className="mt-6">
              <label className="block text-amber-400 font-semibold mb-2">Ïù¥ÏÉÅÌòï ÌÇ§ÏõåÎìú</label>
              <div className="flex flex-wrap gap-2">
                {profileData.idealKeywords.map((keyword, index) => (
                  <span key={index} className="bg-amber-400/20 text-amber-400 px-3 py-1 rounded-full text-sm border border-amber-400 flex items-center gap-2">
                    {keyword}
                    <button
                      onClick={() => {
                        const newKeywords = profileData.idealKeywords.filter((_, i) => i !== index)
                        handleInputChange("idealKeywords", newKeywords)
                      }}
                      className="text-amber-400 hover:text-amber-300 text-lg"
                    >
                      √ó
                    </button>
                  </span>
                ))}
                <input
                  type="text"
                  placeholder="ÌÇ§ÏõåÎìú Ï∂îÍ∞Ä"
                  onKeyPress={(e) => {
                    if (e.key === "Enter" && e.currentTarget.value.trim()) {
                      const newKeywords = [...profileData.idealKeywords, e.currentTarget.value.trim()]
                      handleInputChange("idealKeywords", newKeywords)
                      e.currentTarget.value = ""
                    }
                  }}
                  className="bg-white/20 text-white px-3 py-1 rounded-full text-sm border border-white/30 focus:border-amber-400 focus:outline-none placeholder-gray-400"
                />
              </div>
            </div>
            <div className="flex justify-center mt-8">
              <button
                onClick={() => {
                  // ÌîÑÎ°úÌïÑ Ï†ÄÏû• Î°úÏßÅ
                  alert("ÌîÑÎ°úÌïÑÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!")
                }}
                className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors"
              >
                ÌîÑÎ°úÌïÑ Ï†ÄÏû•
              </button>
            </div>
          </div>

          {/* ÏùºÎ≥Ñ Ïó∞Ïï†Ïö¥ Î∂ÑÏÑù */}
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-amber-400 mb-6">üîÆ Ïò§ÎäòÏùò Ïó∞Ïï†Ïö¥</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-green-500/20 rounded-xl p-6 border border-green-400/30">
                <h3 className="text-xl font-bold text-green-400 mb-4">Í¥ÄÏÉÅ Í∏∞Î∞ò Ïó∞Ïï†Ïö¥</h3>
                <div className="text-center mb-4">
                  <div className="text-4xl font-bold text-green-400 mb-2">85%</div>
                  <div className="w-full bg-white/20 rounded-full h-3">
                    <div className="bg-green-400 h-3 rounded-full" style={{ width: '85%' }}></div>
                  </div>
                </div>
                <p className="text-white leading-relaxed mb-4">
                  Ïò§ÎäòÏùÄ ÎààÎπõÏù¥ ÌäπÌûà Îß§Î†•Ï†ÅÏúºÎ°ú Î≥¥Ïù¥Îäî ÎÇ†ÏûÖÎãàÎã§. 
                  ÌÅ∞ ÎààÍ≥º Í∏¥ ÏÜçÎààÏçπÏùò ÏóêÎÑàÏßÄÍ∞Ä ÏµúÍ≥†Ï°∞Ïóê Îã¨Ìï¥ ÏÉÅÎåÄÎ∞©Ïùò ÎßàÏùåÏùÑ ÏâΩÍ≤å ÏÇ¨Î°úÏû°ÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
                </p>
                <div className="space-y-2 text-sm text-gray-300">
                  <p>‚úì ÏÉàÎ°úÏö¥ ÎßåÎÇ®Ïùò Í∏∞ÌöåÍ∞Ä ÎßéÏùå</p>
                  <p>‚úì Í∏∞Ï°¥ Í¥ÄÍ≥ÑÏóêÏÑú ÍπäÏù¥ ÏûàÎäî ÎåÄÌôî Í∞ÄÎä•</p>
                  <p>‚úì ÏßÅÍ¥ÄÎ†•Ïù¥ Îõ∞Ïñ¥ÎÇò ÏÉÅÎåÄÎ∞©Ïùò ÎßàÏùåÏùÑ Ïûò ÏùΩÏùå</p>
                </div>
              </div>
              <div className="bg-blue-500/20 rounded-xl p-6 border border-blue-400/30">
                <h3 className="text-xl font-bold text-blue-400 mb-4">ÏÇ¨Ï£º Í∏∞Î∞ò Ïó∞Ïï†Ïö¥</h3>
                <div className="text-center mb-4">
                  <div className="text-4xl font-bold text-blue-400 mb-2">78%</div>
                  <div className="w-full bg-white/20 rounded-full h-3">
                    <div className="bg-blue-400 h-3 rounded-full" style={{ width: '78%' }}></div>
                  </div>
                </div>
                <p className="text-white leading-relaxed mb-4">
                  Î™©(Êú®)Í≥º Ìôî(ÁÅ´)Ïùò Í∏∞Ïö¥Ïù¥ Ï°∞ÌôîÎ•º Ïù¥Î£®Ïñ¥ Ï∞ΩÏùòÏ†ÅÏù¥Í≥† Ïó¥Ï†ïÏ†ÅÏù∏ ÎßåÎÇ®Ïù¥ Í∏∞ÎåÄÎê©ÎãàÎã§. 
                  ÌäπÌûà Ïò§ÌõÑ 2Ïãú~4Ïãú ÏÇ¨Ïù¥Ïóê Ï¢ãÏùÄ Í∏∞Ïö¥Ïù¥ ÏßëÏ§ëÎê©ÎãàÎã§.
                </p>
                <div className="space-y-2 text-sm text-gray-300">
                  <p>‚úì Ï∞ΩÏùòÏ†ÅÏù∏ Îç∞Ïù¥Ìä∏ ÏïÑÏù¥ÎîîÏñ¥ Ï†úÏïà</p>
                  <p>‚úì Ïó¥Ï†ïÏ†ÅÏù∏ Í∞êÏ†ï ÌëúÌòÑÏúºÎ°ú Í¥ÄÍ≥Ñ Î∞úÏ†Ñ</p>
                  <p>‚úì ÏÉàÎ°úÏö¥ Ï∑®ÎØ∏ÎÇò ÌôúÎèôÏùÑ ÌÜµÌïú ÎßåÎÇ®</p>
                </div>
              </div>
            </div>
            
            {/* ÏÉÅÏÑ∏ Ïö¥ÏÑ∏ Î∂ÑÏÑù */}
            <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-xl p-6 border border-purple-400/30">
              <h3 className="text-xl font-bold text-purple-400 mb-4">üíï Ïò§ÎäòÏùò Ïó∞Ïï† Ï°∞Ïñ∏</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div className="text-center">
                  <div className="text-2xl mb-2">üïê</div>
                  <p className="text-white font-semibold">ÏµúÏ†Å ÏãúÍ∞Ñ</p>
                  <p className="text-gray-300 text-sm">Ïò§ÌõÑ 2Ïãú~4Ïãú</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl mb-2">üìç</div>
                  <p className="text-white font-semibold">Ï∂îÏ≤ú Ïû•ÏÜå</p>
                  <p className="text-gray-300 text-sm">Ïπ¥Ìéò, Í≥µÏõê, Î¨∏ÌôîÍ≥µÍ∞Ñ</p>
                </div>
                <div className="text-center">
                  <div className="text-2xl mb-2">üé®</div>
                  <p className="text-white font-semibold">ÌôúÎèô Ï∂îÏ≤ú</p>
                  <p className="text-gray-300 text-sm">Ï∞ΩÏùòÏ†Å ÌôúÎèô, ÎåÄÌôî</p>
                </div>
              </div>
              <p className="text-white leading-relaxed text-center">
                Ïò§ÎäòÏùÄ Í¥ÄÏÉÅÍ≥º ÏÇ¨Ï£ºÍ∞Ä Î™®Îëê Ï¢ãÏùÄ Í∏∞Ïö¥ÏùÑ Î≥¥Ïù¥Í≥† ÏûàÏñ¥ Ïó∞Ïï†Ïóê Îß§Ïö∞ Ïú†Î¶¨Ìïú ÎÇ†ÏûÖÎãàÎã§. 
                Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÎßåÎÇ®ÏùÑ Ï∂îÍµ¨ÌïòÍ≥†, Ï∞ΩÏùòÏ†ÅÏù∏ ÏïÑÏù¥ÎîîÏñ¥Î°ú ÏÉÅÎåÄÎ∞©ÏùÑ ÎÜÄÎùºÍ≤å Ìï¥Î≥¥ÏÑ∏Ïöî!
              </p>
            </div>
          </div>

          {/* Ïï°ÏÖò Î≤ÑÌäº */}
          <div className="flex justify-center">
            <button
              onClick={() => setCurrentStep("home")}
              className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors"
            >
              Îß§Ïπ≠ Î™©Î°ùÏúºÎ°ú
            </button>
          </div>
        </div>
      </div>
    )
  }

  // ÌÜµÌï© Î∂ÑÏÑù Îã®Í≥ÑÎ≥Ñ ÌôîÎ©¥ Î†åÎçîÎßÅ
  if (integratedAnalysisStep === "photo") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        {/* Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌëúÏãú */}
        {(isLoggedIn || localUser) && (
          <div className="absolute top-6 right-6 flex items-center gap-4">
            <span className="text-amber-400">
              {localUser?.nickname || 'ÏÇ¨Ïö©Ïûê'}Îãò ÌôòÏòÅÌï©ÎãàÎã§!
            </span>
            <button
              onClick={handleLocalLogout}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full text-sm font-semibold transition-colors"
            >
              Î°úÍ∑∏ÏïÑÏõÉ
            </button>
          </div>
        )}
        
        <div className="text-center max-w-2xl mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8">Í¥ÄÏÉÅ Î∂ÑÏÑù ÏãúÏûë</h1>
          <p className="text-xl text-white mb-8">Ï†ïÎ©¥ ÏñºÍµ¥ ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî</p>
          
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <input
              type="file"
              accept="image/*"
              onChange={handlePhotoUpload}
              className="hidden"
              id="photo-upload"
            />
            <label
              htmlFor="photo-upload"
              className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors cursor-pointer inline-block"
            >
              ÏÇ¨ÏßÑ ÏÑ†ÌÉùÌïòÍ∏∞
            </label>
          </div>

          <button
            onClick={() => setIntegratedAnalysisStep("saju")}
            className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-full text-lg font-semibold transition-colors"
          >
            ÏÇ¨Ï£º Î∂ÑÏÑùÏúºÎ°ú Í±¥ÎÑàÎõ∞Í∏∞
          </button>
        </div>
      </div>
    )
  }

  if (integratedAnalysisStep === "saju") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        {/* Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌëúÏãú */}
        {(isLoggedIn || localUser) && (
          <div className="absolute top-6 right-6 flex items-center gap-4">
            <span className="text-amber-400">
              {localUser?.nickname || 'ÏÇ¨Ïö©Ïûê'}Îãò ÌôòÏòÅÌï©ÎãàÎã§!
            </span>
            <button
              onClick={handleLocalLogout}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full text-sm font-semibold transition-colors"
            >
              Î°úÍ∑∏ÏïÑÏõÉ
            </button>
          </div>
        )}
        
        <div className="text-center max-w-2xl mx-auto">
          {/* Í¥ÄÏÉÅ Î∂ÑÏÑù ÏôÑÎ£å Í≤∞Í≥º ÌëúÏãú */}
          <div className="bg-green-500/20 border border-green-400 rounded-2xl p-6 mb-8">
            <h2 className="text-2xl font-bold text-green-400 mb-4">üéâ Í¥ÄÏÉÅ Î∂ÑÏÑù ÏôÑÎ£å!</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {faceReadingResults.map((result, index) => (
                <div key={index} className="bg-white/10 rounded-lg p-4 text-left">
                  <h3 className="font-semibold text-amber-400 mb-2">{result.keyword}</h3>
                  <p className="text-sm text-gray-300">{result.description}</p>
                </div>
              ))}
            </div>
          </div>
          
          <h1 className="text-4xl font-bold text-amber-400 mb-8">ÏÇ¨Ï£º Î∂ÑÏÑù</h1>
          <p className="text-xl text-white mb-8">ÏÉùÎÖÑÏõîÏùºÍ≥º Ï∂úÏÉù ÏãúÍ∞ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</p>
          
          <div className="bg-white/10 rounded-2xl p-8 mb-8">
            <div className="space-y-4">
              <div>
                <label className="block text-left text-white mb-2">ÏÉùÎÖÑÏõîÏùº</label>
                <input
                  type="date"
                  value={sajuData.birthDate}
                  onChange={(e) => handleSajuInputChange("birthDate", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                />
              </div>
              <div>
                <label className="block text-left text-white mb-2">Ï∂úÏÉù ÏãúÍ∞Ñ</label>
                <select
                  value={sajuData.birthTime}
                  onChange={(e) => handleSajuInputChange("birthTime", e.target.value)}
                  className="w-full px-4 py-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-amber-400 focus:outline-none"
                >
                  <option value="">ÏóÜÏùå</option>
                  <option value="00:00">ÏûêÏãú (23:00-01:00)</option>
                  <option value="02:00">Ï∂ïÏãú (01:00-03:00)</option>
                  <option value="04:00">Ïù∏Ïãú (03:00-05:00)</option>
                  <option value="06:00">Î¨òÏãú (05:00-07:00)</option>
                  <option value="08:00">ÏßÑÏãú (07:00-09:00)</option>
                  <option value="10:00">ÏÇ¨Ïãú (09:00-11:00)</option>
                  <option value="12:00">Ïò§Ïãú (11:00-13:00)</option>
                  <option value="14:00">ÎØ∏Ïãú (13:00-15:00)</option>
                  <option value="16:00">Ïã†Ïãú (15:00-17:00)</option>
                  <option value="18:00">Ïú†Ïãú (17:00-19:00)</option>
                  <option value="20:00">Ïà†Ïãú (19:00-21:00)</option>
                  <option value="22:00">Ìï¥Ïãú (21:00-23:00)</option>
                </select>
              </div>
            </div>
          </div>

          <button
            onClick={() => startSajuAnalysis()}
            className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors"
          >
            ÏÇ¨Ï£º Î∂ÑÏÑù ÏãúÏûë
          </button>
        </div>
      </div>
    )
  }

  if (integratedAnalysisStep === "analyzing") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex flex-col items-center justify-center p-6">
        <div className="text-center max-w-2xl mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8">Í¥ÄÏÉÅÍ≥º ÏÇ¨Ï£º ÌÜµÌï© Î∂ÑÏÑù Ï§ë</h1>
          <div className="bg-white/10 rounded-2xl p-8">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-amber-400 mx-auto mb-4"></div>
            <p className="text-xl text-white">AIÍ∞Ä Í¥ÄÏÉÅÍ≥º ÏÇ¨Ï£ºÎ•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§</p>
          </div>
        </div>
      </div>
    )
  }

  if (integratedAnalysisStep === "result") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        {/* Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌëúÏãú */}
        {(isLoggedIn || localUser) && (
          <div className="absolute top-6 right-6 flex items-center gap-4 z-10">
            <span className="text-amber-400">
              {localUser?.nickname || 'ÏÇ¨Ïö©Ïûê'}Îãò ÌôòÏòÅÌï©ÎãàÎã§!
            </span>
            <button
              onClick={handleLocalLogout}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full text-sm font-semibold transition-colors"
            >
              Î°úÍ∑∏ÏïÑÏõÉ
            </button>
          </div>
        )}
        
        <div className="max-w-4xl mx-auto">
          {/* ÏÉÅÎã® ÏöîÏïΩ Ïπ¥Îìú ÏòÅÏó≠ */}
          <div className="bg-white/10 rounded-3xl p-8 mb-8 text-center">
            <div className="flex items-center justify-center mb-6">
              {uploadedImage && (
                <img 
                  src={uploadedImage} 
                  alt="ÌîÑÎ°úÌïÑ" 
                  className="w-24 h-24 rounded-full object-cover border-4 border-amber-400"
                />
              )}
            </div>
            <h1 className="text-3xl font-bold text-amber-400 mb-4">{profileData.nickname || "ÏÇ¨Ïö©Ïûê"}</h1>
            <div className="text-gray-300 mb-4">
              {profileData.gender === "male" ? "ÎÇ®ÏÑ±" : profileData.gender === "female" ? "Ïó¨ÏÑ±" : ""} ‚Ä¢ {profileData.birthDate}
            </div>
            
            {/* Í¥ÄÏÉÅ ÌÇ§ÏõåÎìú Î∞∞ÏßÄÎì§ */}
            <div className="flex flex-wrap justify-center gap-2 mb-4">
              {faceReadingResults.slice(0, 5).map((result, index) => (
                <span key={index} className="bg-green-500/20 text-green-400 px-3 py-1 rounded-full text-sm border border-green-400">
                  {result.keyword}
                </span>
              ))}
            </div>
            {/* ÏÇ¨Ï£º ÌÇ§ÏõåÎìú Î∞∞ÏßÄÎì§ */}
            <div className="flex flex-wrap justify-center gap-2">
              {sajuResults.slice(0, 5).map((result, index) => (
                <span key={index} className="bg-blue-500/20 text-blue-400 px-3 py-1 rounded-full text-sm border border-blue-400">
                  {result.keyword}
                </span>
              ))}
            </div>
          </div>

          {/* Ïó∞Ïï† Ïä§ÌÉÄÏùº ÏöîÏïΩ ÌÖçÏä§Ìä∏ */}
          <div className="bg-gradient-to-r from-pink-500/20 to-purple-500/20 border border-pink-400 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-pink-400 mb-4 text-center">üíï Ïó∞Ïï† Ïä§ÌÉÄÏùº</h2>
            <p className="text-lg text-white leading-relaxed text-center whitespace-pre-line">
              {`${profileData.nickname || "ÎãπÏã†"}ÏùÄ ${faceReadingResults.map(r => r.keyword).slice(0, 3).join(", ")}Ìïú ÌäπÏÑ±ÏùÑ Í∞ÄÏßÑ ${sajuResults.map(r => r.keyword).slice(0, 2).join(", ")}Ìïú Ïó∞Ïï† Ïä§ÌÉÄÏùºÏûÖÎãàÎã§. 

Í∞êÏ†ïÏùÑ ÏÜîÏßÅÌïòÍ≤å ÌëúÌòÑÌïòÍ≥† ÏÉÅÎåÄÎ∞©Í≥ºÏùò ÍπäÏùÄ ÏÜåÌÜµÏùÑ Ï§ëÏãúÌïòÎ©∞, ÌïúÎ≤à ÎßàÏùåÏùÑ Ïó¥Î©¥ ÏßÑÏã¨ÏúºÎ°ú ÏÇ¨ÎûëÌïòÎäî ÌÉÄÏûÖÏûÖÎãàÎã§. 

ÎãπÏã†Ïùò ${faceReadingResults.find(r => r.keyword.includes("ÏßÅÍ¥Ä") || r.keyword.includes("Í∞êÏ†ï"))?.keyword || "ÏßÅÍ¥ÄÏ†ÅÏù∏"} ÌäπÏÑ±ÏùÄ Ïó∞Ïï†ÏóêÏÑú ÏÉÅÎåÄÎ∞©Ïùò ÎßàÏùåÏùÑ Ïûò ÏùΩÏñ¥ÎÇ¥Îäî Îä•Î†•ÏùÑ ÏÑ†ÏÇ¨Ìï©ÎãàÎã§.`}
            </p>
          </div>

          {/* Í¥ÄÏÉÅ Î∂ÑÏÑù ÏÑπÏÖò */}
          <div className="bg-green-500/20 border border-green-400 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-green-400 mb-6 text-center">üëÅÔ∏è Í¥ÄÏÉÅ Î∂ÑÏÑù</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {faceReadingResults.map((result, index) => (
                <div key={index} className="bg-white/10 rounded-lg p-4">
                  <h3 className="font-semibold text-amber-400 mb-2 text-lg">
                    {index === 0 ? "üëÅÔ∏è ÎààÏùò ÌäπÏßï" : 
                     index === 1 ? "üëÑ ÏûÖÏùò ÌäπÏßï" : 
                     index === 2 ? "üß† Ïù¥Îßà/ÌÑ±" : 
                     index === 3 ? "üëÉ ÏΩî/Í∑Ä" : "‚ú® Ï†ÑÏ≤¥ Ïù∏ÏÉÅ"}
                  </h3>
                  <p className="text-gray-300">{result.description || result.keyword}</p>
                </div>
              ))}
            </div>
            <div className="mt-6 text-center">
              <p className="text-gray-300 italic">
                &ldquo;Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú Í∑†Ìòï Ïû°Ìûå Ïù∏ÏÉÅÏúºÎ°ú, ÏûêÏã†Í∞ê ÏûàÍ≥† Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Îß§Î†•ÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§.&rdquo;
              </p>
            </div>
          </div>

          {/* ÏÇ¨Ï£º Î∂ÑÏÑù ÏÑπÏÖò */}
          <div className="bg-blue-500/20 border border-blue-400 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-blue-400 mb-6 text-center">üîÆ ÏÇ¨Ï£º Î∂ÑÏÑù</h2>
            
            {/* ÏÇ¨Ï£º ÌÇ§ÏõåÎìú ÌëúÏãú */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-4 text-center">ÏÇ¨Ï£º ÏÑ±Ìñ• ÌÇ§ÏõåÎìú</h3>
              <div className="flex flex-wrap justify-center gap-3 mb-6">
                {sajuResults.map((result, index) => (
                  <div key={index} className="bg-white/20 rounded-lg px-4 py-2">
                    <span className="text-amber-400 font-semibold">{result.keyword}</span>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="text-center">
              <p className="text-gray-300 leading-relaxed">
                {`${profileData.nickname || "ÎãπÏã†"}Ïùò ÏÇ¨Ï£ºÎäî ${sajuResults.map(r => r.keyword).slice(0, 3).join(", ")}Ìïú ÌäπÏÑ±ÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§. 
                ${sajuResults.find(r => r.description)?.description || "Í∞êÏ†ïÏùÑ ÏÜîÏßÅÌïòÍ≤å ÌëúÌòÑÌïòÍ≥† ÏÉÅÎåÄÎ∞©Í≥ºÏùò ÍπäÏùÄ ÏÜåÌÜµÏùÑ Ï§ëÏãúÌïòÎäî Ïó∞Ïï† Ïä§ÌÉÄÏùºÏûÖÎãàÎã§."}`}
              </p>
            </div>
          </div>

          {/* Ïù¥ÏÉÅÌòï Ï†úÏïà ÏÑπÏÖò */}
          <div className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border border-yellow-400 rounded-2xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-yellow-400 mb-4 text-center">üåà Ïù¥ÏÉÅÌòï Ï†úÏïà</h2>
            <p className="text-lg text-white leading-relaxed text-center mb-6">
              {`${profileData.nickname || "ÎãπÏã†"}Í≥º Ïñ¥Ïö∏Î¶¨Îäî Ïù¥ÏÉÅÌòïÏùÄ ${faceReadingResults.find(r => r.keyword.includes("ÏßÅÍ¥Ä") || r.keyword.includes("Í∞êÏ†ï"))?.keyword || "ÏßÅÍ¥ÄÏ†ÅÏù∏"} ÌäπÏÑ±ÏùÑ Í∞ÄÏßÑ ÏÇ¨ÎûåÏûÖÎãàÎã§. 

ÏÉÅÎåÄÎ∞©Ïùò ÎßàÏùåÏùÑ Ïûò Ïù¥Ìï¥ÌïòÍ≥† Í≥µÍ∞êÌï† Ïàò ÏûàÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇòÎ©∞, ${sajuResults.find(r => r.keyword.includes("ÏÜåÌÜµ") || r.keyword.includes("Í∞êÏ†ï"))?.keyword || "Í∞êÏ†ï ÌëúÌòÑÏù¥ ÌíçÎ∂ÄÌïú"} Ïä§ÌÉÄÏùºÍ≥º Ïûò ÎßûÏäµÎãàÎã§.`}
            </p>
            <div className="flex flex-wrap justify-center gap-2">
              {["Ï†ïÏÑú ÏïàÏ†ïÌòï", "Î¶¨Ïä§ÎÑàÌòï", "ÌïúÍ≤∞Í∞ôÏùÄ Ïä§ÌÉÄÏùº", "Í∞êÏ†ï ÌëúÌòÑÌòï", "ÏÜåÌÜµ Îä•Î†•Ïûê"].map((keyword, index) => (
                <span key={index} className="bg-yellow-500/20 text-yellow-400 px-4 py-2 rounded-full text-sm border border-yellow-400">
                  {keyword}
                </span>
              ))}
            </div>
          </div>

          {/* ÌïòÎã® CTA Î≤ÑÌäº */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={() => alert("Î¶¨Ìè¨Ìä∏ Ï†ÄÏû• Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§!")}
              className="bg-white/20 hover:bg-white/30 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors border border-white/30"
            >
              Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•ÌïòÍ∏∞
            </button>
            <button
              onClick={() => setCurrentStep("profile")}
              className="bg-amber-400 hover:bg-amber-500 text-black px-8 py-4 rounded-full text-lg font-bold transition-colors"
            >
              Ïù¥ÏÉÅÌòï Ï∞æÏúºÎü¨ Í∞ÄÍ∏∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Ïã§Ï†ú Îß§Ïπ≠ ÌéòÏù¥ÏßÄ
  if (currentStep === "ideal-match") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold text-amber-400 mb-8 text-center">üíï Ïù¥ÏÉÅÌòï Îß§Ïπ≠</h1>
          <p className="text-xl text-white mb-8 text-center">AIÍ∞Ä ÎãπÏã†Í≥º Ïûò ÎßûÎäî ÏÇ¨ÎûåÎì§ÏùÑ Ï∞æÏïòÏäµÎãàÎã§!</p>
          
          {/* Îß§Ïπ≠ Í≤∞Í≥º ÌëúÏãú */}
          <div className="space-y-6">
            {dummyMatches.map((match, index) => (
              <div key={index} className="bg-white/10 rounded-2xl p-6 border border-white/20">
                <div className="flex flex-col md:flex-row gap-6">
                  {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ */}
                  <div className="flex-shrink-0">
                    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-amber-400 to-orange-500 flex items-center justify-center text-4xl">
                      üë§
                    </div>
                  </div>
                  
                  {/* ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ */}
                  <div className="flex-1">
                    <div className="flex items-center gap-4 mb-4">
                      <h3 className="text-2xl font-bold text-amber-400">{match.name}</h3>
                      <span className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                        {match.totalCompatibility}% Í∂ÅÌï©
                      </span>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÎÇòÏù¥:</span> {match.age}ÏÑ∏</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÏßÅÏóÖ:</span> {match.job}</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÏßÄÏó≠:</span> {match.region}</p>
                      </div>
                      <div>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÌÇ§:</span> {match.height}</p>
                        <p className="text-white mb-1"><span className="text-amber-400 font-semibold">ÌïôÎ†•:</span> {match.education}</p>
                      </div>
                    </div>
                    
                    <p className="text-gray-300 mb-4">{match.introduction}</p>
                    
                    {/* Í∂ÅÌï© Î∂ÑÏÑù */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div className="bg-green-500/20 rounded-lg p-3">
                        <p className="text-green-400 font-semibold mb-1">Í¥ÄÏÉÅ Í∂ÅÌï©</p>
                        <p className="text-white text-sm">{match.faceAnalysis}</p>
                      </div>
                      <div className="bg-blue-500/20 rounded-lg p-3">
                        <p className="text-blue-400 font-semibold mb-1">ÏÇ¨Ï£º Í∂ÅÌï©</p>
                        <p className="text-white text-sm">{match.sajuAnalysis}</p>
                      </div>
                    </div>
                    
                    {/* ÌÇ§ÏõåÎìú */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {match.keywords.map((keyword, idx) => (
                        <span key={idx} className="bg-amber-400/20 text-amber-400 px-2 py-1 rounded-full text-xs border border-amber-400">
                          {keyword}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                
                {/* Ïï°ÏÖò Î≤ÑÌäº */}
                <div className="flex flex-col sm:flex-row gap-3 mt-6">
                  <button
                    onClick={() => {
                      setSelectedUser(match)
                      setCurrentStep("other-profile")
                    }}
                    className="flex-1 bg-white/20 hover:bg-white/30 text-white px-6 py-3 rounded-full font-bold transition-colors border border-white/30"
                  >
                    ÌîÑÎ°úÌïÑ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞
                  </button>
                  <button
                    onClick={() => {
                      setSelectedUser(match)
                      initializeChatMessages(match.name)
                      setCurrentStep("dm-chat")
                    }}
                    className="flex-1 bg-amber-400 hover:bg-amber-500 text-black px-6 py-3 rounded-full font-bold transition-colors"
                  >
                    üí¨ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
                  </button>
                </div>
              </div>
            ))}
          </div>
          
          {/* ÌïòÎã® Î≤ÑÌäº */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
            <button
              onClick={() => setCurrentStep("onboarding")}
              className="bg-white/20 hover:bg-white/30 text-white px-6 py-3 rounded-full font-bold transition-colors border border-white/30"
            >
              Ï≤òÏùåÏúºÎ°ú
            </button>
            <button
              onClick={() => alert("Îçî ÎßéÏùÄ Îß§Ïπ≠ Í≤∞Í≥ºÎ•º Î≥¥Î†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî!")}
              className="bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white px-8 py-4 rounded-full text-lg font-bold transition-colors"
            >
              Îçî ÎßéÏùÄ Îß§Ïπ≠ Î≥¥Í∏∞
            </button>
          </div>
        </div>
      </div>
    )
  }



  return (
    <div className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
      <h1>Í¥ÄÏÉÅÏùÄ Í≥ºÌïôÏù¥Îã§</h1>
    </div>
  )
}

export default function FaceReadingApp() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-amber-400 mx-auto mb-4"></div>
          <p className="text-xl">Î°úÎî© Ï§ë...</p>
        </div>
      </div>
    }>
      <FaceReadingAppContent />
    </Suspense>
  )
}
