import { useEffect, useRef, useState } from "react";

interface OhaengPieChartProps {
  ohaengData?: {
    labels: string[];
    data: number[];
    descriptions: string[];
    personalTraits: string[];
    colors: string[];
    overallInterpretation?: string;
  } | undefined;
}

const OhaengPieChart = ({ ohaengData }: OhaengPieChartProps) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ (propsÍ∞Ä ÏóÜÏùÑ Îïå ÏÇ¨Ïö©)
  const defaultLabels = ["Î™©(Êú®)", "Ìôî(ÁÅ´)", "ÌÜ†(Âúü)", "Í∏à(Èáë)", "Ïàò(Ê∞¥)"];
  const defaultData = [25, 15, 30, 10, 20];
  const defaultDescriptions = [
    "ÏûêÎùºÎÇòÎäî ÏÉùÎ™ÖÎ†•, ÏÑ±Ïû•ÏÑ±Í≥º ÎÅàÍ∏∞Î•º Í∞ñÍ≥† ÏûàÏñ¥Ïöî.",
    "Î∂à Í∞ôÏùÄ Ï∂îÏßÑÎ†•, Ïó¥Ï†ïÍ≥º Í∞êÏ†ïÏùò Ìè≠Î∞úÏù¥ Í∞ïÌïú Ìé∏Ïù¥ÏóêÏöî.",
    "Ï§ëÏã¨ÏùÑ Ïû°Îäî ÏïàÏ†ïÍ∞ê, Ï±ÖÏûÑÍ∞êÍ≥º Ïù∏ÎÇ¥Ïã¨Ïù¥ ÎèãÎ≥¥ÏûÖÎãàÎã§.",
    "ÎÉâÏ≤†Ìïú ÌåêÎã®Î†•, Ïù¥ÏÑ±Ï†ÅÏù¥Í≥† Î∂ÑÏÑùÏ†ÅÏù∏ Î©¥Ïù¥ Í∞ïÌï©ÎãàÎã§.",
    "Ïú†Ïó∞Ìïú ÏÇ¨Í≥†ÏôÄ Í∞êÏÑ±, ÌùêÎ¶ÑÏóê ÏàúÏùëÌïòÎäî Ïä§ÌÉÄÏùºÏù¥ÏóêÏöî."
  ];
  const defaultPersonalTraits = [
    "ÏïÑÏù¥ÎîîÏñ¥Î•º Íæ∏Ï§ÄÌûà ÌÇ§ÏõåÎÇòÍ∞ÄÎäî Ïä§ÌÉÄÏùºÏù¥ÏóêÏöî.",
    "ÎïåÎ°† Í∞êÏ†ïÏóê ÏÜîÏßÅÌïòÍ≤å Î∞òÏùëÌïòÎ©∞ Ïù¥ÎÅåÏñ¥Í∞ÄÎäî Ìé∏Ïù¥ÏóêÏöî.",
    "Î¨¥Í≤åÍ∞ê ÏûàÍ≤å Ï§ëÏã¨ÏùÑ Ïû°Í≥† Î¶¨ÎçîÏã≠ÏùÑ Î∞úÌúòÌï¥Ïöî.",
    "ÍººÍººÌïòÍ≥† Ìö®Ïú®Ï†ÅÏù∏ ÏùºÏ≤òÎ¶¨Î•º ÏûòÌïòÎäî Ìé∏Ïù¥ÏóêÏöî.",
    "ÌÉÄÏù∏Ïùò Í∞êÏ†ïÏóê ÎØºÍ∞êÌïòÍ≥† Î∞∞Î†§Ïã¨Ïù¥ ÎßéÏïÑÏöî."
  ];
  const defaultColors = ["#A8D5BA", "#FFB4A2", "#FFEAA7", "#B5B2C2", "#AED9E0"];

  // propsÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÌïòÍ≥†, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
  const labels = ohaengData?.labels || defaultLabels;
  const data = ohaengData?.data || defaultData;
  const descriptions = ohaengData?.descriptions || defaultDescriptions;
  const personalTraits = ohaengData?.personalTraits || defaultPersonalTraits;
  const colors = ohaengData?.colors || defaultColors;

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    const total = data.reduce((sum, val) => sum + val, 0);
    let startAngle = -0.5 * Math.PI;
    const centerX = 200;
    const centerY = 200;
    const outerRadius = 140;
    const innerRadius = 80; // ÎèÑÎÑõ Î™®ÏñëÏùÑ ÏúÑÌïú ÎÇ¥Î∂Ä Î∞òÏßÄÎ¶Ñ

    const handleMouseMove = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left - centerX;
      const y = e.clientY - rect.top - centerY;
      const distance = Math.sqrt(x * x + y * y);

      if (distance < innerRadius || distance > outerRadius) {
        setHoveredIndex(null);
        return;
      }

      let angle = Math.atan2(y, x);
      if (angle < -0.5 * Math.PI) angle += 2 * Math.PI;
      let accAngle = -0.5 * Math.PI;
      for (let i = 0; i < data.length; i++) {
        const slice = (data[i] / total) * 2 * Math.PI;
        if (angle >= accAngle && angle < accAngle + slice) {
          setHoveredIndex(i);
          break;
        }
        accAngle += slice;
      }
    };

    const handleMouseLeave = () => {
      setHoveredIndex(null);
    };

    const handleClick = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left - centerX;
      const y = e.clientY - rect.top - centerY;
      const distance = Math.sqrt(x * x + y * y);

      if (distance < innerRadius || distance > outerRadius) return setSelectedIndex(null);

      let angle = Math.atan2(y, x);
      if (angle < -0.5 * Math.PI) angle += 2 * Math.PI;
      let accAngle = -0.5 * Math.PI;
      for (let i = 0; i < data.length; i++) {
        const slice = (data[i] / total) * 2 * Math.PI;
        if (angle >= accAngle && angle < accAngle + slice) {
          setSelectedIndex(i);
          break;
        }
        accAngle += slice;
      }
    };

    canvas.addEventListener('mousemove', handleMouseMove);
    canvas.addEventListener('mouseleave', handleMouseLeave);
    canvas.addEventListener('click', handleClick);

    // Draw donut chart
    data.forEach((value, i) => {
      const sliceAngle = (value / total) * 2 * Math.PI;
      const isHovered = hoveredIndex === i;
      const isSelected = selectedIndex === i;
      
      // Ìò∏Î≤Ñ Ìö®Í≥ºÎ•º ÏúÑÌïú ÏÉâÏÉÅ Ï°∞Ï†ï
      let currentColor = colors[i];
      if (isHovered) {
        // Ìò∏Î≤Ñ Ïãú Î∞ùÍ≤å
        const color = colors[i];
        const rgb = color.match(/\d+/g);
        if (rgb) {
          const r = Math.min(255, parseInt(rgb[0]) + 30);
          const g = Math.min(255, parseInt(rgb[1]) + 30);
          const b = Math.min(255, parseInt(rgb[2]) + 30);
          currentColor = `rgb(${r}, ${g}, ${b})`;
        }
      }
      
      // Ïô∏Î∂Ä Ïõê Í∑∏Î¶¨Í∏∞
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, outerRadius, startAngle, startAngle + sliceAngle);
      ctx.fillStyle = currentColor;
      ctx.fill();
      
      // ÎÇ¥Î∂Ä ÏõêÏùÑ Ìà¨Î™ÖÌïòÍ≤å ÎßåÎì§Í∏∞ (ÎèÑÎÑõ Î™®Ïñë)
      ctx.globalCompositeOperation = 'destination-out';
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, innerRadius, startAngle, startAngle + sliceAngle);
      ctx.fill();
      ctx.globalCompositeOperation = 'source-over';
      
      // ÌÖåÎëêÎ¶¨ Í∑∏Î¶¨Í∏∞ (Ïô∏Î∂ÄÏôÄ ÎÇ¥Î∂Ä Î™®Îëê)
      ctx.strokeStyle = isSelected ? "#10b981" : "#fff";
      ctx.lineWidth = isSelected ? 3 : 2;
      
      // Ïô∏Î∂Ä ÌÖåÎëêÎ¶¨
      ctx.beginPath();
      ctx.arc(centerX, centerY, outerRadius, startAngle, startAngle + sliceAngle);
      ctx.stroke();
      
      // ÎÇ¥Î∂Ä ÌÖåÎëêÎ¶¨
      ctx.beginPath();
      ctx.arc(centerX, centerY, innerRadius, startAngle, startAngle + sliceAngle);
      ctx.stroke();
      
      // ÌçºÏÑºÌä∏ÏôÄ ÎùºÎ≤® ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞ (Ïä¨ÎùºÏù¥Ïä§Í∞Ä Ï∂©Î∂ÑÌûà ÌÅ¥ ÎïåÎßå)
      if (sliceAngle > 0.2) { // ÏµúÏÜå Í∞ÅÎèÑ Ï≤¥ÌÅ¨
        const midAngle = startAngle + sliceAngle / 2;
        const labelRadius = (outerRadius + innerRadius) / 2;
        const labelX = centerX + Math.cos(midAngle) * labelRadius;
        const labelY = centerY + Math.sin(midAngle) * labelRadius;
        
        // ÌÖçÏä§Ìä∏ Î∞∞Í≤Ω Í∑∏Î¶¨Í∏∞
        ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
        ctx.fillRect(labelX - 25, labelY - 15, 50, 30);
        
        // ÌçºÏÑºÌä∏ ÌÖçÏä§Ìä∏
        ctx.fillStyle = "#ffffff";
        ctx.font = "bold 12px Arial";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillText(`${value}%`, labelX, labelY - 3);
        
        // Ïò§Ìñâ ÎùºÎ≤® ÌÖçÏä§Ìä∏
        ctx.fillStyle = "#e2e8f0";
        ctx.font = "10px Arial";
        ctx.fillText(labels[i], labelX, labelY + 8);
      }
      
      startAngle += sliceAngle;
    });

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨ Ìï®Ïàò Î∞òÌôò
    return () => {
      canvas.removeEventListener('mousemove', handleMouseMove);
      canvas.removeEventListener('mouseleave', handleMouseLeave);
      canvas.removeEventListener('click', handleClick);
    };
  }, [data, colors, labels, hoveredIndex, selectedIndex]);

  return (
    <div className="flex flex-col items-center space-y-6">
      <canvas ref={canvasRef} width={400} height={400} className="bg-white/10 rounded-xl shadow-md cursor-pointer border border-white/20" />

      {/* Î≤îÎ°Ä */}
      <div className="flex flex-wrap justify-center gap-4 mt-4">
        {labels.map((label, i) => (
          <div key={i} className="flex items-center gap-2">
            <div 
              className="w-4 h-4 rounded-full" 
              style={{ backgroundColor: colors[i] }}
            />
            <span className="text-sm text-gray-300">{label} ({data[i]}%)</span>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 w-full max-w-3xl mt-4">
        {data.map((value, i) => (
          <div
            key={labels[i]}
            className={`flex flex-col border border-white/20 rounded-lg p-4 bg-white/5 shadow-sm transition-all duration-200 hover:bg-white/10 cursor-pointer ${selectedIndex === i ? 'ring-2 ring-green-400 bg-green-500/20' : ''}`}
            onClick={() => setSelectedIndex(i)}
          >
            <h3 className="font-semibold text-lg text-white">
              {labels[i]} <span className="text-sm text-green-300">({value}%)</span>
            </h3>
            <p className="text-sm text-gray-300 mt-1">üåÄ Í∏∞Î≥∏ ÏÑ±Ìñ•: {descriptions[i]}</p>
            <p className="text-sm text-gray-200 mt-1">‚ú® ÎãπÏã†Ïùò ÌäπÏßï: {personalTraits[i]}</p>
          </div>
        ))}
      </div>

    </div>
  );
};

export default OhaengPieChart;